// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt,
} from "@graphprotocol/graph-ts";

export class StakingRewards03__rewardsResult {
  value0: Address;
  value1: BigInt;
  value2: BigInt;
  value3: BigInt;
  value4: BigInt;

  constructor(
    value0: Address,
    value1: BigInt,
    value2: BigInt,
    value3: BigInt,
    value4: BigInt,
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddress(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    map.set("value4", ethereum.Value.fromUnsignedBigInt(this.value4));
    return map;
  }

  getToken(): Address {
    return this.value0;
  }

  getAmount(): BigInt {
    return this.value1;
  }

  getPerStakedToken(): BigInt {
    return this.value2;
  }

  getRecoverableSeconds(): BigInt {
    return this.value3;
  }

  getClaimed(): BigInt {
    return this.value4;
  }
}

export class StakingRewards03 extends ethereum.SmartContract {
  static bind(address: Address): StakingRewards03 {
    return new StakingRewards03("StakingRewards03", address);
  }

  rewards(param0: BigInt): StakingRewards03__rewardsResult {
    let result = super.call(
      "rewards",
      "rewards(uint256):(address,uint256,uint256,uint256,uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)],
    );

    return new StakingRewards03__rewardsResult(
      result[0].toAddress(),
      result[1].toBigInt(),
      result[2].toBigInt(),
      result[3].toBigInt(),
      result[4].toBigInt(),
    );
  }

  try_rewards(
    param0: BigInt,
  ): ethereum.CallResult<StakingRewards03__rewardsResult> {
    let result = super.tryCall(
      "rewards",
      "rewards(uint256):(address,uint256,uint256,uint256,uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new StakingRewards03__rewardsResult(
        value[0].toAddress(),
        value[1].toBigInt(),
        value[2].toBigInt(),
        value[3].toBigInt(),
        value[4].toBigInt(),
      ),
    );
  }

  stakableToken(): Address {
    let result = super.call("stakableToken", "stakableToken():(address)", []);

    return result[0].toAddress();
  }

  try_stakableToken(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "stakableToken",
      "stakableToken():(address)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  factory(): Address {
    let result = super.call("factory", "factory():(address)", []);

    return result[0].toAddress();
  }

  try_factory(): ethereum.CallResult<Address> {
    let result = super.tryCall("factory", "factory():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  initialized(): boolean {
    let result = super.call("initialized", "initialized():(bool)", []);

    return result[0].toBoolean();
  }

  try_initialized(): ethereum.CallResult<boolean> {
    let result = super.tryCall("initialized", "initialized():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  canceled(): boolean {
    let result = super.call("canceled", "canceled():(bool)", []);

    return result[0].toBoolean();
  }

  try_canceled(): ethereum.CallResult<boolean> {
    let result = super.tryCall("canceled", "canceled():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  locked(): boolean {
    let result = super.call("locked", "locked():(bool)", []);

    return result[0].toBoolean();
  }

  try_locked(): ethereum.CallResult<boolean> {
    let result = super.tryCall("locked", "locked():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  stakingCap(): BigInt {
    let result = super.call("stakingCap", "stakingCap():(uint256)", []);

    return result[0].toBigInt();
  }

  try_stakingCap(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("stakingCap", "stakingCap():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  startingTimestamp(): BigInt {
    let result = super.call(
      "startingTimestamp",
      "startingTimestamp():(uint256)",
      [],
    );

    return result[0].toBigInt();
  }

  try_startingTimestamp(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "startingTimestamp",
      "startingTimestamp():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  endingTimestamp(): BigInt {
    let result = super.call(
      "endingTimestamp",
      "endingTimestamp():(uint256)",
      [],
    );

    return result[0].toBigInt();
  }

  try_endingTimestamp(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "endingTimestamp",
      "endingTimestamp():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  totalStakedTokensAmount(): BigInt {
    let result = super.call(
      "totalStakedTokensAmount",
      "totalStakedTokensAmount():(uint256)",
      [],
    );

    return result[0].toBigInt();
  }

  try_totalStakedTokensAmount(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "totalStakedTokensAmount",
      "totalStakedTokensAmount():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  stakedTokensOf(account: Address): BigInt {
    let result = super.call(
      "stakedTokensOf",
      "stakedTokensOf(address):(uint256)",
      [ethereum.Value.fromAddress(account)],
    );

    return result[0].toBigInt();
  }

  try_stakedTokensOf(account: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "stakedTokensOf",
      "stakedTokensOf(address):(uint256)",
      [ethereum.Value.fromAddress(account)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  earnedRewardsOf(account: Address): Array<BigInt> {
    let result = super.call(
      "earnedRewardsOf",
      "earnedRewardsOf(address):(uint256[])",
      [ethereum.Value.fromAddress(account)],
    );

    return result[0].toBigIntArray();
  }

  try_earnedRewardsOf(account: Address): ethereum.CallResult<Array<BigInt>> {
    let result = super.tryCall(
      "earnedRewardsOf",
      "earnedRewardsOf(address):(uint256[])",
      [ethereum.Value.fromAddress(account)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigIntArray());
  }
}

export class StakeCall extends ethereum.Call {
  get inputs(): StakeCall__Inputs {
    return new StakeCall__Inputs(this);
  }

  get outputs(): StakeCall__Outputs {
    return new StakeCall__Outputs(this);
  }
}

export class StakeCall__Inputs {
  _call: StakeCall;

  constructor(call: StakeCall) {
    this._call = call;
  }

  get amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class StakeCall__Outputs {
  _call: StakeCall;

  constructor(call: StakeCall) {
    this._call = call;
  }
}

export class WithdrawCall extends ethereum.Call {
  get inputs(): WithdrawCall__Inputs {
    return new WithdrawCall__Inputs(this);
  }

  get outputs(): WithdrawCall__Outputs {
    return new WithdrawCall__Outputs(this);
  }
}

export class WithdrawCall__Inputs {
  _call: WithdrawCall;

  constructor(call: WithdrawCall) {
    this._call = call;
  }

  get amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class WithdrawCall__Outputs {
  _call: WithdrawCall;

  constructor(call: WithdrawCall) {
    this._call = call;
  }
}

export class ClaimAllCall extends ethereum.Call {
  get inputs(): ClaimAllCall__Inputs {
    return new ClaimAllCall__Inputs(this);
  }

  get outputs(): ClaimAllCall__Outputs {
    return new ClaimAllCall__Outputs(this);
  }
}

export class ClaimAllCall__Inputs {
  _call: ClaimAllCall;

  constructor(call: ClaimAllCall) {
    this._call = call;
  }

  get recipient(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class ClaimAllCall__Outputs {
  _call: ClaimAllCall;

  constructor(call: ClaimAllCall) {
    this._call = call;
  }
}
