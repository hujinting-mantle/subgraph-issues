// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt,
} from "@graphprotocol/graph-ts";

export class Approval extends ethereum.Event {
  get params(): Approval__Params {
    return new Approval__Params(this);
  }
}

export class Approval__Params {
  _event: Approval;

  constructor(event: Approval) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get spender(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get value(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class Mint extends ethereum.Event {
  get params(): Mint__Params {
    return new Mint__Params(this);
  }
}

export class Mint__Params {
  _event: Mint;

  constructor(event: Mint) {
    this._event = event;
  }

  get sender(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get minter(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get mintAmount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get mintTokens(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class NewLiquidationFee extends ethereum.Event {
  get params(): NewLiquidationFee__Params {
    return new NewLiquidationFee__Params(this);
  }
}

export class NewLiquidationFee__Params {
  _event: NewLiquidationFee;

  constructor(event: NewLiquidationFee) {
    this._event = event;
  }

  get newLiquidationFee(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class NewLiquidationIncentive extends ethereum.Event {
  get params(): NewLiquidationIncentive__Params {
    return new NewLiquidationIncentive__Params(this);
  }
}

export class NewLiquidationIncentive__Params {
  _event: NewLiquidationIncentive;

  constructor(event: NewLiquidationIncentive) {
    this._event = event;
  }

  get newLiquidationIncentive(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class NewMTolerance extends ethereum.Event {
  get params(): NewMTolerance__Params {
    return new NewMTolerance__Params(this);
  }
}

export class NewMTolerance__Params {
  _event: NewMTolerance;

  constructor(event: NewMTolerance) {
    this._event = event;
  }

  get newMTolerance(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class NewSafetyMargin extends ethereum.Event {
  get params(): NewSafetyMargin__Params {
    return new NewSafetyMargin__Params(this);
  }
}

export class NewSafetyMargin__Params {
  _event: NewSafetyMargin;

  constructor(event: NewSafetyMargin) {
    this._event = event;
  }

  get newSafetyMargin(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class Redeem extends ethereum.Event {
  get params(): Redeem__Params {
    return new Redeem__Params(this);
  }
}

export class Redeem__Params {
  _event: Redeem;

  constructor(event: Redeem) {
    this._event = event;
  }

  get sender(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get redeemer(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get redeemAmount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get redeemTokens(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class Sync extends ethereum.Event {
  get params(): Sync__Params {
    return new Sync__Params(this);
  }
}

export class Sync__Params {
  _event: Sync;

  constructor(event: Sync) {
    this._event = event;
  }

  get totalBalance(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class Transfer extends ethereum.Event {
  get params(): Transfer__Params {
    return new Transfer__Params(this);
  }
}

export class Transfer__Params {
  _event: Transfer;

  constructor(event: Transfer) {
    this._event = event;
  }

  get from(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get value(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class CollateralStable__getTwapReservesResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }

  getTwapReserve0(): BigInt {
    return this.value0;
  }

  getTwapReserve1(): BigInt {
    return this.value1;
  }
}

export class CollateralStable__getReservesResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }

  getReserve0(): BigInt {
    return this.value0;
  }

  getReserve1(): BigInt {
    return this.value1;
  }
}

export class CollateralStable__getPricesResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }

  getPrice0(): BigInt {
    return this.value0;
  }

  getPrice1(): BigInt {
    return this.value1;
  }
}

export class CollateralStable__accountLiquidityAmountsResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }

  getLiquidity(): BigInt {
    return this.value0;
  }

  getShortfall(): BigInt {
    return this.value1;
  }
}

export class CollateralStable__accountLiquidityResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }

  getLiquidity(): BigInt {
    return this.value0;
  }

  getShortfall(): BigInt {
    return this.value1;
  }
}

export class CollateralStable extends ethereum.SmartContract {
  static bind(address: Address): CollateralStable {
    return new CollateralStable("CollateralStable", address);
  }

  DOMAIN_SEPARATOR(): Bytes {
    let result = super.call(
      "DOMAIN_SEPARATOR",
      "DOMAIN_SEPARATOR():(bytes32)",
      [],
    );

    return result[0].toBytes();
  }

  try_DOMAIN_SEPARATOR(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "DOMAIN_SEPARATOR",
      "DOMAIN_SEPARATOR():(bytes32)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  LIQUIDATION_FEE_MAX(): BigInt {
    let result = super.call(
      "LIQUIDATION_FEE_MAX",
      "LIQUIDATION_FEE_MAX():(uint256)",
      [],
    );

    return result[0].toBigInt();
  }

  try_LIQUIDATION_FEE_MAX(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "LIQUIDATION_FEE_MAX",
      "LIQUIDATION_FEE_MAX():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  LIQUIDATION_INCENTIVE_MAX(): BigInt {
    let result = super.call(
      "LIQUIDATION_INCENTIVE_MAX",
      "LIQUIDATION_INCENTIVE_MAX():(uint256)",
      [],
    );

    return result[0].toBigInt();
  }

  try_LIQUIDATION_INCENTIVE_MAX(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "LIQUIDATION_INCENTIVE_MAX",
      "LIQUIDATION_INCENTIVE_MAX():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  LIQUIDATION_INCENTIVE_MIN(): BigInt {
    let result = super.call(
      "LIQUIDATION_INCENTIVE_MIN",
      "LIQUIDATION_INCENTIVE_MIN():(uint256)",
      [],
    );

    return result[0].toBigInt();
  }

  try_LIQUIDATION_INCENTIVE_MIN(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "LIQUIDATION_INCENTIVE_MIN",
      "LIQUIDATION_INCENTIVE_MIN():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  MINIMUM_LIQUIDITY(): BigInt {
    let result = super.call(
      "MINIMUM_LIQUIDITY",
      "MINIMUM_LIQUIDITY():(uint256)",
      [],
    );

    return result[0].toBigInt();
  }

  try_MINIMUM_LIQUIDITY(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "MINIMUM_LIQUIDITY",
      "MINIMUM_LIQUIDITY():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  M_TOLERANCE_MAX(): BigInt {
    let result = super.call(
      "M_TOLERANCE_MAX",
      "M_TOLERANCE_MAX():(uint256)",
      [],
    );

    return result[0].toBigInt();
  }

  try_M_TOLERANCE_MAX(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "M_TOLERANCE_MAX",
      "M_TOLERANCE_MAX():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  M_TOLERANCE_MIN(): BigInt {
    let result = super.call(
      "M_TOLERANCE_MIN",
      "M_TOLERANCE_MIN():(uint256)",
      [],
    );

    return result[0].toBigInt();
  }

  try_M_TOLERANCE_MIN(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "M_TOLERANCE_MIN",
      "M_TOLERANCE_MIN():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  PERMIT_TYPEHASH(): Bytes {
    let result = super.call(
      "PERMIT_TYPEHASH",
      "PERMIT_TYPEHASH():(bytes32)",
      [],
    );

    return result[0].toBytes();
  }

  try_PERMIT_TYPEHASH(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "PERMIT_TYPEHASH",
      "PERMIT_TYPEHASH():(bytes32)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  SAFETY_MARGIN_MAX(): BigInt {
    let result = super.call(
      "SAFETY_MARGIN_MAX",
      "SAFETY_MARGIN_MAX():(uint256)",
      [],
    );

    return result[0].toBigInt();
  }

  try_SAFETY_MARGIN_MAX(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "SAFETY_MARGIN_MAX",
      "SAFETY_MARGIN_MAX():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  SAFETY_MARGIN_MIN(): BigInt {
    let result = super.call(
      "SAFETY_MARGIN_MIN",
      "SAFETY_MARGIN_MIN():(uint256)",
      [],
    );

    return result[0].toBigInt();
  }

  try_SAFETY_MARGIN_MIN(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "SAFETY_MARGIN_MIN",
      "SAFETY_MARGIN_MIN():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  allowance(param0: Address, param1: Address): BigInt {
    let result = super.call(
      "allowance",
      "allowance(address,address):(uint256)",
      [ethereum.Value.fromAddress(param0), ethereum.Value.fromAddress(param1)],
    );

    return result[0].toBigInt();
  }

  try_allowance(param0: Address, param1: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "allowance",
      "allowance(address,address):(uint256)",
      [ethereum.Value.fromAddress(param0), ethereum.Value.fromAddress(param1)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  approve(spender: Address, value: BigInt): boolean {
    let result = super.call("approve", "approve(address,uint256):(bool)", [
      ethereum.Value.fromAddress(spender),
      ethereum.Value.fromUnsignedBigInt(value),
    ]);

    return result[0].toBoolean();
  }

  try_approve(spender: Address, value: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall("approve", "approve(address,uint256):(bool)", [
      ethereum.Value.fromAddress(spender),
      ethereum.Value.fromUnsignedBigInt(value),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  balanceOf(param0: Address): BigInt {
    let result = super.call("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(param0),
    ]);

    return result[0].toBigInt();
  }

  try_balanceOf(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(param0),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  borrowable0(): Address {
    let result = super.call("borrowable0", "borrowable0():(address)", []);

    return result[0].toAddress();
  }

  try_borrowable0(): ethereum.CallResult<Address> {
    let result = super.tryCall("borrowable0", "borrowable0():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  borrowable1(): Address {
    let result = super.call("borrowable1", "borrowable1():(address)", []);

    return result[0].toAddress();
  }

  try_borrowable1(): ethereum.CallResult<Address> {
    let result = super.tryCall("borrowable1", "borrowable1():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  decimals(): i32 {
    let result = super.call("decimals", "decimals():(uint8)", []);

    return result[0].toI32();
  }

  try_decimals(): ethereum.CallResult<i32> {
    let result = super.tryCall("decimals", "decimals():(uint8)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  exchangeRate(): BigInt {
    let result = super.call("exchangeRate", "exchangeRate():(uint256)", []);

    return result[0].toBigInt();
  }

  try_exchangeRate(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("exchangeRate", "exchangeRate():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  factory(): Address {
    let result = super.call("factory", "factory():(address)", []);

    return result[0].toAddress();
  }

  try_factory(): ethereum.CallResult<Address> {
    let result = super.tryCall("factory", "factory():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  liquidationFee(): BigInt {
    let result = super.call("liquidationFee", "liquidationFee():(uint256)", []);

    return result[0].toBigInt();
  }

  try_liquidationFee(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "liquidationFee",
      "liquidationFee():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  liquidationIncentive(): BigInt {
    let result = super.call(
      "liquidationIncentive",
      "liquidationIncentive():(uint256)",
      [],
    );

    return result[0].toBigInt();
  }

  try_liquidationIncentive(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "liquidationIncentive",
      "liquidationIncentive():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  liquidationPenalty(): BigInt {
    let result = super.call(
      "liquidationPenalty",
      "liquidationPenalty():(uint256)",
      [],
    );

    return result[0].toBigInt();
  }

  try_liquidationPenalty(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "liquidationPenalty",
      "liquidationPenalty():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  mTolerance(): BigInt {
    let result = super.call("mTolerance", "mTolerance():(uint256)", []);

    return result[0].toBigInt();
  }

  try_mTolerance(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("mTolerance", "mTolerance():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  mint(minter: Address): BigInt {
    let result = super.call("mint", "mint(address):(uint256)", [
      ethereum.Value.fromAddress(minter),
    ]);

    return result[0].toBigInt();
  }

  try_mint(minter: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("mint", "mint(address):(uint256)", [
      ethereum.Value.fromAddress(minter),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  name(): string {
    let result = super.call("name", "name():(string)", []);

    return result[0].toString();
  }

  try_name(): ethereum.CallResult<string> {
    let result = super.tryCall("name", "name():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  nonces(param0: Address): BigInt {
    let result = super.call("nonces", "nonces(address):(uint256)", [
      ethereum.Value.fromAddress(param0),
    ]);

    return result[0].toBigInt();
  }

  try_nonces(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("nonces", "nonces(address):(uint256)", [
      ethereum.Value.fromAddress(param0),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  redeem(redeemer: Address): BigInt {
    let result = super.call("redeem", "redeem(address):(uint256)", [
      ethereum.Value.fromAddress(redeemer),
    ]);

    return result[0].toBigInt();
  }

  try_redeem(redeemer: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("redeem", "redeem(address):(uint256)", [
      ethereum.Value.fromAddress(redeemer),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  safetyMargin(): BigInt {
    let result = super.call("safetyMargin", "safetyMargin():(uint256)", []);

    return result[0].toBigInt();
  }

  try_safetyMargin(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("safetyMargin", "safetyMargin():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  symbol(): string {
    let result = super.call("symbol", "symbol():(string)", []);

    return result[0].toString();
  }

  try_symbol(): ethereum.CallResult<string> {
    let result = super.tryCall("symbol", "symbol():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  totalBalance(): BigInt {
    let result = super.call("totalBalance", "totalBalance():(uint256)", []);

    return result[0].toBigInt();
  }

  try_totalBalance(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("totalBalance", "totalBalance():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  totalSupply(): BigInt {
    let result = super.call("totalSupply", "totalSupply():(uint256)", []);

    return result[0].toBigInt();
  }

  try_totalSupply(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("totalSupply", "totalSupply():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  transfer(to: Address, value: BigInt): boolean {
    let result = super.call("transfer", "transfer(address,uint256):(bool)", [
      ethereum.Value.fromAddress(to),
      ethereum.Value.fromUnsignedBigInt(value),
    ]);

    return result[0].toBoolean();
  }

  try_transfer(to: Address, value: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall("transfer", "transfer(address,uint256):(bool)", [
      ethereum.Value.fromAddress(to),
      ethereum.Value.fromUnsignedBigInt(value),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  transferFrom(from: Address, to: Address, value: BigInt): boolean {
    let result = super.call(
      "transferFrom",
      "transferFrom(address,address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(from),
        ethereum.Value.fromAddress(to),
        ethereum.Value.fromUnsignedBigInt(value),
      ],
    );

    return result[0].toBoolean();
  }

  try_transferFrom(
    from: Address,
    to: Address,
    value: BigInt,
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "transferFrom",
      "transferFrom(address,address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(from),
        ethereum.Value.fromAddress(to),
        ethereum.Value.fromUnsignedBigInt(value),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  underlying(): Address {
    let result = super.call("underlying", "underlying():(address)", []);

    return result[0].toAddress();
  }

  try_underlying(): ethereum.CallResult<Address> {
    let result = super.tryCall("underlying", "underlying():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getTwapReserves(): CollateralStable__getTwapReservesResult {
    let result = super.call(
      "getTwapReserves",
      "getTwapReserves():(uint112,uint112)",
      [],
    );

    return new CollateralStable__getTwapReservesResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
    );
  }

  try_getTwapReserves(): ethereum.CallResult<CollateralStable__getTwapReservesResult> {
    let result = super.tryCall(
      "getTwapReserves",
      "getTwapReserves():(uint112,uint112)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new CollateralStable__getTwapReservesResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
      ),
    );
  }

  getReserves(): CollateralStable__getReservesResult {
    let result = super.call(
      "getReserves",
      "getReserves():(uint112,uint112)",
      [],
    );

    return new CollateralStable__getReservesResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
    );
  }

  try_getReserves(): ethereum.CallResult<CollateralStable__getReservesResult> {
    let result = super.tryCall(
      "getReserves",
      "getReserves():(uint112,uint112)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new CollateralStable__getReservesResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
      ),
    );
  }

  getPrices(): CollateralStable__getPricesResult {
    let result = super.call("getPrices", "getPrices():(uint256,uint256)", []);

    return new CollateralStable__getPricesResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
    );
  }

  try_getPrices(): ethereum.CallResult<CollateralStable__getPricesResult> {
    let result = super.tryCall(
      "getPrices",
      "getPrices():(uint256,uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new CollateralStable__getPricesResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
      ),
    );
  }

  tokensUnlocked(from: Address, value: BigInt): boolean {
    let result = super.call(
      "tokensUnlocked",
      "tokensUnlocked(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(from),
        ethereum.Value.fromUnsignedBigInt(value),
      ],
    );

    return result[0].toBoolean();
  }

  try_tokensUnlocked(
    from: Address,
    value: BigInt,
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "tokensUnlocked",
      "tokensUnlocked(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(from),
        ethereum.Value.fromUnsignedBigInt(value),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  accountLiquidityAmounts(
    borrower: Address,
    amount0: BigInt,
    amount1: BigInt,
  ): CollateralStable__accountLiquidityAmountsResult {
    let result = super.call(
      "accountLiquidityAmounts",
      "accountLiquidityAmounts(address,uint256,uint256):(uint256,uint256)",
      [
        ethereum.Value.fromAddress(borrower),
        ethereum.Value.fromUnsignedBigInt(amount0),
        ethereum.Value.fromUnsignedBigInt(amount1),
      ],
    );

    return new CollateralStable__accountLiquidityAmountsResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
    );
  }

  try_accountLiquidityAmounts(
    borrower: Address,
    amount0: BigInt,
    amount1: BigInt,
  ): ethereum.CallResult<CollateralStable__accountLiquidityAmountsResult> {
    let result = super.tryCall(
      "accountLiquidityAmounts",
      "accountLiquidityAmounts(address,uint256,uint256):(uint256,uint256)",
      [
        ethereum.Value.fromAddress(borrower),
        ethereum.Value.fromUnsignedBigInt(amount0),
        ethereum.Value.fromUnsignedBigInt(amount1),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new CollateralStable__accountLiquidityAmountsResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
      ),
    );
  }

  accountLiquidity(
    borrower: Address,
  ): CollateralStable__accountLiquidityResult {
    let result = super.call(
      "accountLiquidity",
      "accountLiquidity(address):(uint256,uint256)",
      [ethereum.Value.fromAddress(borrower)],
    );

    return new CollateralStable__accountLiquidityResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
    );
  }

  try_accountLiquidity(
    borrower: Address,
  ): ethereum.CallResult<CollateralStable__accountLiquidityResult> {
    let result = super.tryCall(
      "accountLiquidity",
      "accountLiquidity(address):(uint256,uint256)",
      [ethereum.Value.fromAddress(borrower)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new CollateralStable__accountLiquidityResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
      ),
    );
  }

  canBorrow(
    borrower: Address,
    borrowable: Address,
    accountBorrows: BigInt,
  ): boolean {
    let result = super.call(
      "canBorrow",
      "canBorrow(address,address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(borrower),
        ethereum.Value.fromAddress(borrowable),
        ethereum.Value.fromUnsignedBigInt(accountBorrows),
      ],
    );

    return result[0].toBoolean();
  }

  try_canBorrow(
    borrower: Address,
    borrowable: Address,
    accountBorrows: BigInt,
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "canBorrow",
      "canBorrow(address,address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(borrower),
        ethereum.Value.fromAddress(borrowable),
        ethereum.Value.fromUnsignedBigInt(accountBorrows),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  seize(liquidator: Address, borrower: Address, repayAmount: BigInt): BigInt {
    let result = super.call(
      "seize",
      "seize(address,address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(liquidator),
        ethereum.Value.fromAddress(borrower),
        ethereum.Value.fromUnsignedBigInt(repayAmount),
      ],
    );

    return result[0].toBigInt();
  }

  try_seize(
    liquidator: Address,
    borrower: Address,
    repayAmount: BigInt,
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "seize",
      "seize(address,address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(liquidator),
        ethereum.Value.fromAddress(borrower),
        ethereum.Value.fromUnsignedBigInt(repayAmount),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class _initializeCall extends ethereum.Call {
  get inputs(): _initializeCall__Inputs {
    return new _initializeCall__Inputs(this);
  }

  get outputs(): _initializeCall__Outputs {
    return new _initializeCall__Outputs(this);
  }
}

export class _initializeCall__Inputs {
  _call: _initializeCall;

  constructor(call: _initializeCall) {
    this._call = call;
  }

  get _name(): string {
    return this._call.inputValues[0].value.toString();
  }

  get _symbol(): string {
    return this._call.inputValues[1].value.toString();
  }

  get _underlying(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get _borrowable0(): Address {
    return this._call.inputValues[3].value.toAddress();
  }

  get _borrowable1(): Address {
    return this._call.inputValues[4].value.toAddress();
  }
}

export class _initializeCall__Outputs {
  _call: _initializeCall;

  constructor(call: _initializeCall) {
    this._call = call;
  }
}

export class _setFactoryCall extends ethereum.Call {
  get inputs(): _setFactoryCall__Inputs {
    return new _setFactoryCall__Inputs(this);
  }

  get outputs(): _setFactoryCall__Outputs {
    return new _setFactoryCall__Outputs(this);
  }
}

export class _setFactoryCall__Inputs {
  _call: _setFactoryCall;

  constructor(call: _setFactoryCall) {
    this._call = call;
  }
}

export class _setFactoryCall__Outputs {
  _call: _setFactoryCall;

  constructor(call: _setFactoryCall) {
    this._call = call;
  }
}

export class _setLiquidationFeeCall extends ethereum.Call {
  get inputs(): _setLiquidationFeeCall__Inputs {
    return new _setLiquidationFeeCall__Inputs(this);
  }

  get outputs(): _setLiquidationFeeCall__Outputs {
    return new _setLiquidationFeeCall__Outputs(this);
  }
}

export class _setLiquidationFeeCall__Inputs {
  _call: _setLiquidationFeeCall;

  constructor(call: _setLiquidationFeeCall) {
    this._call = call;
  }

  get newLiquidationFee(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class _setLiquidationFeeCall__Outputs {
  _call: _setLiquidationFeeCall;

  constructor(call: _setLiquidationFeeCall) {
    this._call = call;
  }
}

export class _setLiquidationIncentiveCall extends ethereum.Call {
  get inputs(): _setLiquidationIncentiveCall__Inputs {
    return new _setLiquidationIncentiveCall__Inputs(this);
  }

  get outputs(): _setLiquidationIncentiveCall__Outputs {
    return new _setLiquidationIncentiveCall__Outputs(this);
  }
}

export class _setLiquidationIncentiveCall__Inputs {
  _call: _setLiquidationIncentiveCall;

  constructor(call: _setLiquidationIncentiveCall) {
    this._call = call;
  }

  get newLiquidationIncentive(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class _setLiquidationIncentiveCall__Outputs {
  _call: _setLiquidationIncentiveCall;

  constructor(call: _setLiquidationIncentiveCall) {
    this._call = call;
  }
}

export class _setMToleranceCall extends ethereum.Call {
  get inputs(): _setMToleranceCall__Inputs {
    return new _setMToleranceCall__Inputs(this);
  }

  get outputs(): _setMToleranceCall__Outputs {
    return new _setMToleranceCall__Outputs(this);
  }
}

export class _setMToleranceCall__Inputs {
  _call: _setMToleranceCall;

  constructor(call: _setMToleranceCall) {
    this._call = call;
  }

  get newMTolerance(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class _setMToleranceCall__Outputs {
  _call: _setMToleranceCall;

  constructor(call: _setMToleranceCall) {
    this._call = call;
  }
}

export class _setSafetyMarginCall extends ethereum.Call {
  get inputs(): _setSafetyMarginCall__Inputs {
    return new _setSafetyMarginCall__Inputs(this);
  }

  get outputs(): _setSafetyMarginCall__Outputs {
    return new _setSafetyMarginCall__Outputs(this);
  }
}

export class _setSafetyMarginCall__Inputs {
  _call: _setSafetyMarginCall;

  constructor(call: _setSafetyMarginCall) {
    this._call = call;
  }

  get newSafetyMargin(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class _setSafetyMarginCall__Outputs {
  _call: _setSafetyMarginCall;

  constructor(call: _setSafetyMarginCall) {
    this._call = call;
  }
}

export class ApproveCall extends ethereum.Call {
  get inputs(): ApproveCall__Inputs {
    return new ApproveCall__Inputs(this);
  }

  get outputs(): ApproveCall__Outputs {
    return new ApproveCall__Outputs(this);
  }
}

export class ApproveCall__Inputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }

  get spender(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get value(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class ApproveCall__Outputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class ExchangeRateCall extends ethereum.Call {
  get inputs(): ExchangeRateCall__Inputs {
    return new ExchangeRateCall__Inputs(this);
  }

  get outputs(): ExchangeRateCall__Outputs {
    return new ExchangeRateCall__Outputs(this);
  }
}

export class ExchangeRateCall__Inputs {
  _call: ExchangeRateCall;

  constructor(call: ExchangeRateCall) {
    this._call = call;
  }
}

export class ExchangeRateCall__Outputs {
  _call: ExchangeRateCall;

  constructor(call: ExchangeRateCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class MintCall extends ethereum.Call {
  get inputs(): MintCall__Inputs {
    return new MintCall__Inputs(this);
  }

  get outputs(): MintCall__Outputs {
    return new MintCall__Outputs(this);
  }
}

export class MintCall__Inputs {
  _call: MintCall;

  constructor(call: MintCall) {
    this._call = call;
  }

  get minter(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class MintCall__Outputs {
  _call: MintCall;

  constructor(call: MintCall) {
    this._call = call;
  }

  get mintTokens(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class PermitCall extends ethereum.Call {
  get inputs(): PermitCall__Inputs {
    return new PermitCall__Inputs(this);
  }

  get outputs(): PermitCall__Outputs {
    return new PermitCall__Outputs(this);
  }
}

export class PermitCall__Inputs {
  _call: PermitCall;

  constructor(call: PermitCall) {
    this._call = call;
  }

  get owner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get spender(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get value(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get deadline(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get v(): i32 {
    return this._call.inputValues[4].value.toI32();
  }

  get r(): Bytes {
    return this._call.inputValues[5].value.toBytes();
  }

  get s(): Bytes {
    return this._call.inputValues[6].value.toBytes();
  }
}

export class PermitCall__Outputs {
  _call: PermitCall;

  constructor(call: PermitCall) {
    this._call = call;
  }
}

export class RedeemCall extends ethereum.Call {
  get inputs(): RedeemCall__Inputs {
    return new RedeemCall__Inputs(this);
  }

  get outputs(): RedeemCall__Outputs {
    return new RedeemCall__Outputs(this);
  }
}

export class RedeemCall__Inputs {
  _call: RedeemCall;

  constructor(call: RedeemCall) {
    this._call = call;
  }

  get redeemer(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class RedeemCall__Outputs {
  _call: RedeemCall;

  constructor(call: RedeemCall) {
    this._call = call;
  }

  get redeemAmount(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class SkimCall extends ethereum.Call {
  get inputs(): SkimCall__Inputs {
    return new SkimCall__Inputs(this);
  }

  get outputs(): SkimCall__Outputs {
    return new SkimCall__Outputs(this);
  }
}

export class SkimCall__Inputs {
  _call: SkimCall;

  constructor(call: SkimCall) {
    this._call = call;
  }

  get to(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SkimCall__Outputs {
  _call: SkimCall;

  constructor(call: SkimCall) {
    this._call = call;
  }
}

export class SyncCall extends ethereum.Call {
  get inputs(): SyncCall__Inputs {
    return new SyncCall__Inputs(this);
  }

  get outputs(): SyncCall__Outputs {
    return new SyncCall__Outputs(this);
  }
}

export class SyncCall__Inputs {
  _call: SyncCall;

  constructor(call: SyncCall) {
    this._call = call;
  }
}

export class SyncCall__Outputs {
  _call: SyncCall;

  constructor(call: SyncCall) {
    this._call = call;
  }
}

export class TransferCall extends ethereum.Call {
  get inputs(): TransferCall__Inputs {
    return new TransferCall__Inputs(this);
  }

  get outputs(): TransferCall__Outputs {
    return new TransferCall__Outputs(this);
  }
}

export class TransferCall__Inputs {
  _call: TransferCall;

  constructor(call: TransferCall) {
    this._call = call;
  }

  get to(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get value(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class TransferCall__Outputs {
  _call: TransferCall;

  constructor(call: TransferCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class TransferFromCall extends ethereum.Call {
  get inputs(): TransferFromCall__Inputs {
    return new TransferFromCall__Inputs(this);
  }

  get outputs(): TransferFromCall__Outputs {
    return new TransferFromCall__Outputs(this);
  }
}

export class TransferFromCall__Inputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get value(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class TransferFromCall__Outputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class GetTwapReservesCall extends ethereum.Call {
  get inputs(): GetTwapReservesCall__Inputs {
    return new GetTwapReservesCall__Inputs(this);
  }

  get outputs(): GetTwapReservesCall__Outputs {
    return new GetTwapReservesCall__Outputs(this);
  }
}

export class GetTwapReservesCall__Inputs {
  _call: GetTwapReservesCall;

  constructor(call: GetTwapReservesCall) {
    this._call = call;
  }
}

export class GetTwapReservesCall__Outputs {
  _call: GetTwapReservesCall;

  constructor(call: GetTwapReservesCall) {
    this._call = call;
  }

  get twapReserve0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }

  get twapReserve1(): BigInt {
    return this._call.outputValues[1].value.toBigInt();
  }
}

export class GetReservesCall extends ethereum.Call {
  get inputs(): GetReservesCall__Inputs {
    return new GetReservesCall__Inputs(this);
  }

  get outputs(): GetReservesCall__Outputs {
    return new GetReservesCall__Outputs(this);
  }
}

export class GetReservesCall__Inputs {
  _call: GetReservesCall;

  constructor(call: GetReservesCall) {
    this._call = call;
  }
}

export class GetReservesCall__Outputs {
  _call: GetReservesCall;

  constructor(call: GetReservesCall) {
    this._call = call;
  }

  get reserve0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }

  get reserve1(): BigInt {
    return this._call.outputValues[1].value.toBigInt();
  }
}

export class GetPricesCall extends ethereum.Call {
  get inputs(): GetPricesCall__Inputs {
    return new GetPricesCall__Inputs(this);
  }

  get outputs(): GetPricesCall__Outputs {
    return new GetPricesCall__Outputs(this);
  }
}

export class GetPricesCall__Inputs {
  _call: GetPricesCall;

  constructor(call: GetPricesCall) {
    this._call = call;
  }
}

export class GetPricesCall__Outputs {
  _call: GetPricesCall;

  constructor(call: GetPricesCall) {
    this._call = call;
  }

  get price0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }

  get price1(): BigInt {
    return this._call.outputValues[1].value.toBigInt();
  }
}

export class TokensUnlockedCall extends ethereum.Call {
  get inputs(): TokensUnlockedCall__Inputs {
    return new TokensUnlockedCall__Inputs(this);
  }

  get outputs(): TokensUnlockedCall__Outputs {
    return new TokensUnlockedCall__Outputs(this);
  }
}

export class TokensUnlockedCall__Inputs {
  _call: TokensUnlockedCall;

  constructor(call: TokensUnlockedCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get value(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class TokensUnlockedCall__Outputs {
  _call: TokensUnlockedCall;

  constructor(call: TokensUnlockedCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class AccountLiquidityAmountsCall extends ethereum.Call {
  get inputs(): AccountLiquidityAmountsCall__Inputs {
    return new AccountLiquidityAmountsCall__Inputs(this);
  }

  get outputs(): AccountLiquidityAmountsCall__Outputs {
    return new AccountLiquidityAmountsCall__Outputs(this);
  }
}

export class AccountLiquidityAmountsCall__Inputs {
  _call: AccountLiquidityAmountsCall;

  constructor(call: AccountLiquidityAmountsCall) {
    this._call = call;
  }

  get borrower(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount0(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get amount1(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class AccountLiquidityAmountsCall__Outputs {
  _call: AccountLiquidityAmountsCall;

  constructor(call: AccountLiquidityAmountsCall) {
    this._call = call;
  }

  get liquidity(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }

  get shortfall(): BigInt {
    return this._call.outputValues[1].value.toBigInt();
  }
}

export class AccountLiquidityCall extends ethereum.Call {
  get inputs(): AccountLiquidityCall__Inputs {
    return new AccountLiquidityCall__Inputs(this);
  }

  get outputs(): AccountLiquidityCall__Outputs {
    return new AccountLiquidityCall__Outputs(this);
  }
}

export class AccountLiquidityCall__Inputs {
  _call: AccountLiquidityCall;

  constructor(call: AccountLiquidityCall) {
    this._call = call;
  }

  get borrower(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class AccountLiquidityCall__Outputs {
  _call: AccountLiquidityCall;

  constructor(call: AccountLiquidityCall) {
    this._call = call;
  }

  get liquidity(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }

  get shortfall(): BigInt {
    return this._call.outputValues[1].value.toBigInt();
  }
}

export class CanBorrowCall extends ethereum.Call {
  get inputs(): CanBorrowCall__Inputs {
    return new CanBorrowCall__Inputs(this);
  }

  get outputs(): CanBorrowCall__Outputs {
    return new CanBorrowCall__Outputs(this);
  }
}

export class CanBorrowCall__Inputs {
  _call: CanBorrowCall;

  constructor(call: CanBorrowCall) {
    this._call = call;
  }

  get borrower(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get borrowable(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get accountBorrows(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class CanBorrowCall__Outputs {
  _call: CanBorrowCall;

  constructor(call: CanBorrowCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class SeizeCall extends ethereum.Call {
  get inputs(): SeizeCall__Inputs {
    return new SeizeCall__Inputs(this);
  }

  get outputs(): SeizeCall__Outputs {
    return new SeizeCall__Outputs(this);
  }
}

export class SeizeCall__Inputs {
  _call: SeizeCall;

  constructor(call: SeizeCall) {
    this._call = call;
  }

  get liquidator(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get borrower(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get repayAmount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class SeizeCall__Outputs {
  _call: SeizeCall;

  constructor(call: SeizeCall) {
    this._call = call;
  }

  get seizeTokens(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class FlashRedeemCall extends ethereum.Call {
  get inputs(): FlashRedeemCall__Inputs {
    return new FlashRedeemCall__Inputs(this);
  }

  get outputs(): FlashRedeemCall__Outputs {
    return new FlashRedeemCall__Outputs(this);
  }
}

export class FlashRedeemCall__Inputs {
  _call: FlashRedeemCall;

  constructor(call: FlashRedeemCall) {
    this._call = call;
  }

  get redeemer(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get redeemAmount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get data(): Bytes {
    return this._call.inputValues[2].value.toBytes();
  }
}

export class FlashRedeemCall__Outputs {
  _call: FlashRedeemCall;

  constructor(call: FlashRedeemCall) {
    this._call = call;
  }
}
