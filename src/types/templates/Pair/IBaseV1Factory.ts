// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt,
} from "@graphprotocol/graph-ts";

export class IBaseV1Factory extends ethereum.SmartContract {
  static bind(address: Address): IBaseV1Factory {
    return new IBaseV1Factory("IBaseV1Factory", address);
  }

  getPair(tokenA: Address, tokenB: Address, stable: boolean): Address {
    let result = super.call(
      "getPair",
      "getPair(address,address,bool):(address)",
      [
        ethereum.Value.fromAddress(tokenA),
        ethereum.Value.fromAddress(tokenB),
        ethereum.Value.fromBoolean(stable),
      ],
    );

    return result[0].toAddress();
  }

  try_getPair(
    tokenA: Address,
    tokenB: Address,
    stable: boolean,
  ): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getPair",
      "getPair(address,address,bool):(address)",
      [
        ethereum.Value.fromAddress(tokenA),
        ethereum.Value.fromAddress(tokenB),
        ethereum.Value.fromBoolean(stable),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getPool(tokenA: Address, tokenB: Address, stable: boolean): Address {
    let result = super.call(
      "getPool",
      "getPool(address,address,bool):(address)",
      [
        ethereum.Value.fromAddress(tokenA),
        ethereum.Value.fromAddress(tokenB),
        ethereum.Value.fromBoolean(stable),
      ],
    );

    return result[0].toAddress();
  }

  try_getPool(
    tokenA: Address,
    tokenB: Address,
    stable: boolean,
  ): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getPool",
      "getPool(address,address,bool):(address)",
      [
        ethereum.Value.fromAddress(tokenA),
        ethereum.Value.fromAddress(tokenB),
        ethereum.Value.fromBoolean(stable),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }
}
