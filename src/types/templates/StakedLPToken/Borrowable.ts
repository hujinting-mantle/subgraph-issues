// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt,
} from "@graphprotocol/graph-ts";

export class AccrueInterest extends ethereum.Event {
  get params(): AccrueInterest__Params {
    return new AccrueInterest__Params(this);
  }
}

export class AccrueInterest__Params {
  _event: AccrueInterest;

  constructor(event: AccrueInterest) {
    this._event = event;
  }

  get interestAccumulated(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get borrowIndex(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get totalBorrows(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class Approval extends ethereum.Event {
  get params(): Approval__Params {
    return new Approval__Params(this);
  }
}

export class Approval__Params {
  _event: Approval;

  constructor(event: Approval) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get spender(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get value(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class Borrow extends ethereum.Event {
  get params(): Borrow__Params {
    return new Borrow__Params(this);
  }
}

export class Borrow__Params {
  _event: Borrow;

  constructor(event: Borrow) {
    this._event = event;
  }

  get sender(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get borrower(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get receiver(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get borrowAmount(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get repayAmount(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get accountBorrowsPrior(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }

  get accountBorrows(): BigInt {
    return this._event.parameters[6].value.toBigInt();
  }

  get totalBorrows(): BigInt {
    return this._event.parameters[7].value.toBigInt();
  }
}

export class BorrowApproval extends ethereum.Event {
  get params(): BorrowApproval__Params {
    return new BorrowApproval__Params(this);
  }
}

export class BorrowApproval__Params {
  _event: BorrowApproval;

  constructor(event: BorrowApproval) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get spender(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get value(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class CalculateBorrowRate extends ethereum.Event {
  get params(): CalculateBorrowRate__Params {
    return new CalculateBorrowRate__Params(this);
  }
}

export class CalculateBorrowRate__Params {
  _event: CalculateBorrowRate;

  constructor(event: CalculateBorrowRate) {
    this._event = event;
  }

  get borrowRate(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class CalculateKink extends ethereum.Event {
  get params(): CalculateKink__Params {
    return new CalculateKink__Params(this);
  }
}

export class CalculateKink__Params {
  _event: CalculateKink;

  constructor(event: CalculateKink) {
    this._event = event;
  }

  get kinkRate(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class CalculateKinkBorrowRate extends ethereum.Event {
  get params(): CalculateKinkBorrowRate__Params {
    return new CalculateKinkBorrowRate__Params(this);
  }
}

export class CalculateKinkBorrowRate__Params {
  _event: CalculateKinkBorrowRate;

  constructor(event: CalculateKinkBorrowRate) {
    this._event = event;
  }

  get kinkBorrowRate(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class Liquidate extends ethereum.Event {
  get params(): Liquidate__Params {
    return new Liquidate__Params(this);
  }
}

export class Liquidate__Params {
  _event: Liquidate;

  constructor(event: Liquidate) {
    this._event = event;
  }

  get sender(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get borrower(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get liquidator(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get seizeTokens(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get repayAmount(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get accountBorrowsPrior(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }

  get accountBorrows(): BigInt {
    return this._event.parameters[6].value.toBigInt();
  }

  get totalBorrows(): BigInt {
    return this._event.parameters[7].value.toBigInt();
  }
}

export class Mint extends ethereum.Event {
  get params(): Mint__Params {
    return new Mint__Params(this);
  }
}

export class Mint__Params {
  _event: Mint;

  constructor(event: Mint) {
    this._event = event;
  }

  get sender(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get minter(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get mintAmount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get mintTokens(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class NewAdjustSpeed extends ethereum.Event {
  get params(): NewAdjustSpeed__Params {
    return new NewAdjustSpeed__Params(this);
  }
}

export class NewAdjustSpeed__Params {
  _event: NewAdjustSpeed;

  constructor(event: NewAdjustSpeed) {
    this._event = event;
  }

  get newAdjustSpeed(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class NewBorrowTracker extends ethereum.Event {
  get params(): NewBorrowTracker__Params {
    return new NewBorrowTracker__Params(this);
  }
}

export class NewBorrowTracker__Params {
  _event: NewBorrowTracker;

  constructor(event: NewBorrowTracker) {
    this._event = event;
  }

  get newBorrowTracker(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class NewKinkUtilizationRate extends ethereum.Event {
  get params(): NewKinkUtilizationRate__Params {
    return new NewKinkUtilizationRate__Params(this);
  }
}

export class NewKinkUtilizationRate__Params {
  _event: NewKinkUtilizationRate;

  constructor(event: NewKinkUtilizationRate) {
    this._event = event;
  }

  get newKinkUtilizationRate(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class NewReserveFactor extends ethereum.Event {
  get params(): NewReserveFactor__Params {
    return new NewReserveFactor__Params(this);
  }
}

export class NewReserveFactor__Params {
  _event: NewReserveFactor;

  constructor(event: NewReserveFactor) {
    this._event = event;
  }

  get newReserveFactor(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class Redeem extends ethereum.Event {
  get params(): Redeem__Params {
    return new Redeem__Params(this);
  }
}

export class Redeem__Params {
  _event: Redeem;

  constructor(event: Redeem) {
    this._event = event;
  }

  get sender(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get redeemer(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get redeemAmount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get redeemTokens(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class Sync extends ethereum.Event {
  get params(): Sync__Params {
    return new Sync__Params(this);
  }
}

export class Sync__Params {
  _event: Sync;

  constructor(event: Sync) {
    this._event = event;
  }

  get totalBalance(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class Transfer extends ethereum.Event {
  get params(): Transfer__Params {
    return new Transfer__Params(this);
  }
}

export class Transfer__Params {
  _event: Transfer;

  constructor(event: Transfer) {
    this._event = event;
  }

  get from(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get value(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class Borrowable extends ethereum.SmartContract {
  static bind(address: Address): Borrowable {
    return new Borrowable("Borrowable", address);
  }

  ADJUST_SPEED_MAX(): BigInt {
    let result = super.call(
      "ADJUST_SPEED_MAX",
      "ADJUST_SPEED_MAX():(uint256)",
      [],
    );

    return result[0].toBigInt();
  }

  try_ADJUST_SPEED_MAX(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "ADJUST_SPEED_MAX",
      "ADJUST_SPEED_MAX():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  ADJUST_SPEED_MIN(): BigInt {
    let result = super.call(
      "ADJUST_SPEED_MIN",
      "ADJUST_SPEED_MIN():(uint256)",
      [],
    );

    return result[0].toBigInt();
  }

  try_ADJUST_SPEED_MIN(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "ADJUST_SPEED_MIN",
      "ADJUST_SPEED_MIN():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  BORROW_FEE(): BigInt {
    let result = super.call("BORROW_FEE", "BORROW_FEE():(uint256)", []);

    return result[0].toBigInt();
  }

  try_BORROW_FEE(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("BORROW_FEE", "BORROW_FEE():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  BORROW_PERMIT_TYPEHASH(): Bytes {
    let result = super.call(
      "BORROW_PERMIT_TYPEHASH",
      "BORROW_PERMIT_TYPEHASH():(bytes32)",
      [],
    );

    return result[0].toBytes();
  }

  try_BORROW_PERMIT_TYPEHASH(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "BORROW_PERMIT_TYPEHASH",
      "BORROW_PERMIT_TYPEHASH():(bytes32)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  DOMAIN_SEPARATOR(): Bytes {
    let result = super.call(
      "DOMAIN_SEPARATOR",
      "DOMAIN_SEPARATOR():(bytes32)",
      [],
    );

    return result[0].toBytes();
  }

  try_DOMAIN_SEPARATOR(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "DOMAIN_SEPARATOR",
      "DOMAIN_SEPARATOR():(bytes32)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  KINK_BORROW_RATE_MAX(): BigInt {
    let result = super.call(
      "KINK_BORROW_RATE_MAX",
      "KINK_BORROW_RATE_MAX():(uint256)",
      [],
    );

    return result[0].toBigInt();
  }

  try_KINK_BORROW_RATE_MAX(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "KINK_BORROW_RATE_MAX",
      "KINK_BORROW_RATE_MAX():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  KINK_BORROW_RATE_MIN(): BigInt {
    let result = super.call(
      "KINK_BORROW_RATE_MIN",
      "KINK_BORROW_RATE_MIN():(uint256)",
      [],
    );

    return result[0].toBigInt();
  }

  try_KINK_BORROW_RATE_MIN(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "KINK_BORROW_RATE_MIN",
      "KINK_BORROW_RATE_MIN():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  KINK_MULTIPLIER(): BigInt {
    let result = super.call(
      "KINK_MULTIPLIER",
      "KINK_MULTIPLIER():(uint256)",
      [],
    );

    return result[0].toBigInt();
  }

  try_KINK_MULTIPLIER(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "KINK_MULTIPLIER",
      "KINK_MULTIPLIER():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  KINK_UR_MAX(): BigInt {
    let result = super.call("KINK_UR_MAX", "KINK_UR_MAX():(uint256)", []);

    return result[0].toBigInt();
  }

  try_KINK_UR_MAX(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("KINK_UR_MAX", "KINK_UR_MAX():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  KINK_UR_MIN(): BigInt {
    let result = super.call("KINK_UR_MIN", "KINK_UR_MIN():(uint256)", []);

    return result[0].toBigInt();
  }

  try_KINK_UR_MIN(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("KINK_UR_MIN", "KINK_UR_MIN():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  MINIMUM_LIQUIDITY(): BigInt {
    let result = super.call(
      "MINIMUM_LIQUIDITY",
      "MINIMUM_LIQUIDITY():(uint256)",
      [],
    );

    return result[0].toBigInt();
  }

  try_MINIMUM_LIQUIDITY(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "MINIMUM_LIQUIDITY",
      "MINIMUM_LIQUIDITY():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  PERMIT_TYPEHASH(): Bytes {
    let result = super.call(
      "PERMIT_TYPEHASH",
      "PERMIT_TYPEHASH():(bytes32)",
      [],
    );

    return result[0].toBytes();
  }

  try_PERMIT_TYPEHASH(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "PERMIT_TYPEHASH",
      "PERMIT_TYPEHASH():(bytes32)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  RESERVE_FACTOR_MAX(): BigInt {
    let result = super.call(
      "RESERVE_FACTOR_MAX",
      "RESERVE_FACTOR_MAX():(uint256)",
      [],
    );

    return result[0].toBigInt();
  }

  try_RESERVE_FACTOR_MAX(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "RESERVE_FACTOR_MAX",
      "RESERVE_FACTOR_MAX():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  accrualTimestamp(): BigInt {
    let result = super.call(
      "accrualTimestamp",
      "accrualTimestamp():(uint32)",
      [],
    );

    return result[0].toBigInt();
  }

  try_accrualTimestamp(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "accrualTimestamp",
      "accrualTimestamp():(uint32)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  adjustSpeed(): BigInt {
    let result = super.call("adjustSpeed", "adjustSpeed():(uint256)", []);

    return result[0].toBigInt();
  }

  try_adjustSpeed(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("adjustSpeed", "adjustSpeed():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  allowance(param0: Address, param1: Address): BigInt {
    let result = super.call(
      "allowance",
      "allowance(address,address):(uint256)",
      [ethereum.Value.fromAddress(param0), ethereum.Value.fromAddress(param1)],
    );

    return result[0].toBigInt();
  }

  try_allowance(param0: Address, param1: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "allowance",
      "allowance(address,address):(uint256)",
      [ethereum.Value.fromAddress(param0), ethereum.Value.fromAddress(param1)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  approve(spender: Address, value: BigInt): boolean {
    let result = super.call("approve", "approve(address,uint256):(bool)", [
      ethereum.Value.fromAddress(spender),
      ethereum.Value.fromUnsignedBigInt(value),
    ]);

    return result[0].toBoolean();
  }

  try_approve(spender: Address, value: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall("approve", "approve(address,uint256):(bool)", [
      ethereum.Value.fromAddress(spender),
      ethereum.Value.fromUnsignedBigInt(value),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  balanceOf(param0: Address): BigInt {
    let result = super.call("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(param0),
    ]);

    return result[0].toBigInt();
  }

  try_balanceOf(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(param0),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  borrowAllowance(param0: Address, param1: Address): BigInt {
    let result = super.call(
      "borrowAllowance",
      "borrowAllowance(address,address):(uint256)",
      [ethereum.Value.fromAddress(param0), ethereum.Value.fromAddress(param1)],
    );

    return result[0].toBigInt();
  }

  try_borrowAllowance(
    param0: Address,
    param1: Address,
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "borrowAllowance",
      "borrowAllowance(address,address):(uint256)",
      [ethereum.Value.fromAddress(param0), ethereum.Value.fromAddress(param1)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  borrowApprove(spender: Address, value: BigInt): boolean {
    let result = super.call(
      "borrowApprove",
      "borrowApprove(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(spender),
        ethereum.Value.fromUnsignedBigInt(value),
      ],
    );

    return result[0].toBoolean();
  }

  try_borrowApprove(
    spender: Address,
    value: BigInt,
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "borrowApprove",
      "borrowApprove(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(spender),
        ethereum.Value.fromUnsignedBigInt(value),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  borrowIndex(): BigInt {
    let result = super.call("borrowIndex", "borrowIndex():(uint112)", []);

    return result[0].toBigInt();
  }

  try_borrowIndex(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("borrowIndex", "borrowIndex():(uint112)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  borrowRate(): BigInt {
    let result = super.call("borrowRate", "borrowRate():(uint48)", []);

    return result[0].toBigInt();
  }

  try_borrowRate(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("borrowRate", "borrowRate():(uint48)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  borrowTracker(): Address {
    let result = super.call("borrowTracker", "borrowTracker():(address)", []);

    return result[0].toAddress();
  }

  try_borrowTracker(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "borrowTracker",
      "borrowTracker():(address)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  collateral(): Address {
    let result = super.call("collateral", "collateral():(address)", []);

    return result[0].toAddress();
  }

  try_collateral(): ethereum.CallResult<Address> {
    let result = super.tryCall("collateral", "collateral():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  decimals(): i32 {
    let result = super.call("decimals", "decimals():(uint8)", []);

    return result[0].toI32();
  }

  try_decimals(): ethereum.CallResult<i32> {
    let result = super.tryCall("decimals", "decimals():(uint8)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  exchangeRateLast(): BigInt {
    let result = super.call(
      "exchangeRateLast",
      "exchangeRateLast():(uint256)",
      [],
    );

    return result[0].toBigInt();
  }

  try_exchangeRateLast(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "exchangeRateLast",
      "exchangeRateLast():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  factory(): Address {
    let result = super.call("factory", "factory():(address)", []);

    return result[0].toAddress();
  }

  try_factory(): ethereum.CallResult<Address> {
    let result = super.tryCall("factory", "factory():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getBlockTimestamp(): BigInt {
    let result = super.call(
      "getBlockTimestamp",
      "getBlockTimestamp():(uint32)",
      [],
    );

    return result[0].toBigInt();
  }

  try_getBlockTimestamp(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getBlockTimestamp",
      "getBlockTimestamp():(uint32)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  kinkBorrowRate(): BigInt {
    let result = super.call("kinkBorrowRate", "kinkBorrowRate():(uint48)", []);

    return result[0].toBigInt();
  }

  try_kinkBorrowRate(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "kinkBorrowRate",
      "kinkBorrowRate():(uint48)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  kinkUtilizationRate(): BigInt {
    let result = super.call(
      "kinkUtilizationRate",
      "kinkUtilizationRate():(uint256)",
      [],
    );

    return result[0].toBigInt();
  }

  try_kinkUtilizationRate(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "kinkUtilizationRate",
      "kinkUtilizationRate():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  mint(minter: Address): BigInt {
    let result = super.call("mint", "mint(address):(uint256)", [
      ethereum.Value.fromAddress(minter),
    ]);

    return result[0].toBigInt();
  }

  try_mint(minter: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("mint", "mint(address):(uint256)", [
      ethereum.Value.fromAddress(minter),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  name(): string {
    let result = super.call("name", "name():(string)", []);

    return result[0].toString();
  }

  try_name(): ethereum.CallResult<string> {
    let result = super.tryCall("name", "name():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  nonces(param0: Address): BigInt {
    let result = super.call("nonces", "nonces(address):(uint256)", [
      ethereum.Value.fromAddress(param0),
    ]);

    return result[0].toBigInt();
  }

  try_nonces(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("nonces", "nonces(address):(uint256)", [
      ethereum.Value.fromAddress(param0),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  rateUpdateTimestamp(): BigInt {
    let result = super.call(
      "rateUpdateTimestamp",
      "rateUpdateTimestamp():(uint32)",
      [],
    );

    return result[0].toBigInt();
  }

  try_rateUpdateTimestamp(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "rateUpdateTimestamp",
      "rateUpdateTimestamp():(uint32)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  redeem(redeemer: Address): BigInt {
    let result = super.call("redeem", "redeem(address):(uint256)", [
      ethereum.Value.fromAddress(redeemer),
    ]);

    return result[0].toBigInt();
  }

  try_redeem(redeemer: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("redeem", "redeem(address):(uint256)", [
      ethereum.Value.fromAddress(redeemer),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  reserveFactor(): BigInt {
    let result = super.call("reserveFactor", "reserveFactor():(uint256)", []);

    return result[0].toBigInt();
  }

  try_reserveFactor(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "reserveFactor",
      "reserveFactor():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  symbol(): string {
    let result = super.call("symbol", "symbol():(string)", []);

    return result[0].toString();
  }

  try_symbol(): ethereum.CallResult<string> {
    let result = super.tryCall("symbol", "symbol():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  totalBalance(): BigInt {
    let result = super.call("totalBalance", "totalBalance():(uint256)", []);

    return result[0].toBigInt();
  }

  try_totalBalance(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("totalBalance", "totalBalance():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  totalBorrows(): BigInt {
    let result = super.call("totalBorrows", "totalBorrows():(uint112)", []);

    return result[0].toBigInt();
  }

  try_totalBorrows(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("totalBorrows", "totalBorrows():(uint112)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  totalSupply(): BigInt {
    let result = super.call("totalSupply", "totalSupply():(uint256)", []);

    return result[0].toBigInt();
  }

  try_totalSupply(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("totalSupply", "totalSupply():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  transfer(to: Address, value: BigInt): boolean {
    let result = super.call("transfer", "transfer(address,uint256):(bool)", [
      ethereum.Value.fromAddress(to),
      ethereum.Value.fromUnsignedBigInt(value),
    ]);

    return result[0].toBoolean();
  }

  try_transfer(to: Address, value: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall("transfer", "transfer(address,uint256):(bool)", [
      ethereum.Value.fromAddress(to),
      ethereum.Value.fromUnsignedBigInt(value),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  transferFrom(from: Address, to: Address, value: BigInt): boolean {
    let result = super.call(
      "transferFrom",
      "transferFrom(address,address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(from),
        ethereum.Value.fromAddress(to),
        ethereum.Value.fromUnsignedBigInt(value),
      ],
    );

    return result[0].toBoolean();
  }

  try_transferFrom(
    from: Address,
    to: Address,
    value: BigInt,
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "transferFrom",
      "transferFrom(address,address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(from),
        ethereum.Value.fromAddress(to),
        ethereum.Value.fromUnsignedBigInt(value),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  underlying(): Address {
    let result = super.call("underlying", "underlying():(address)", []);

    return result[0].toAddress();
  }

  try_underlying(): ethereum.CallResult<Address> {
    let result = super.tryCall("underlying", "underlying():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  exchangeRate(): BigInt {
    let result = super.call("exchangeRate", "exchangeRate():(uint256)", []);

    return result[0].toBigInt();
  }

  try_exchangeRate(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("exchangeRate", "exchangeRate():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  borrowBalance(borrower: Address): BigInt {
    let result = super.call(
      "borrowBalance",
      "borrowBalance(address):(uint256)",
      [ethereum.Value.fromAddress(borrower)],
    );

    return result[0].toBigInt();
  }

  try_borrowBalance(borrower: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "borrowBalance",
      "borrowBalance(address):(uint256)",
      [ethereum.Value.fromAddress(borrower)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  liquidate(borrower: Address, liquidator: Address): BigInt {
    let result = super.call(
      "liquidate",
      "liquidate(address,address):(uint256)",
      [
        ethereum.Value.fromAddress(borrower),
        ethereum.Value.fromAddress(liquidator),
      ],
    );

    return result[0].toBigInt();
  }

  try_liquidate(
    borrower: Address,
    liquidator: Address,
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "liquidate",
      "liquidate(address,address):(uint256)",
      [
        ethereum.Value.fromAddress(borrower),
        ethereum.Value.fromAddress(liquidator),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class _initializeCall extends ethereum.Call {
  get inputs(): _initializeCall__Inputs {
    return new _initializeCall__Inputs(this);
  }

  get outputs(): _initializeCall__Outputs {
    return new _initializeCall__Outputs(this);
  }
}

export class _initializeCall__Inputs {
  _call: _initializeCall;

  constructor(call: _initializeCall) {
    this._call = call;
  }

  get _name(): string {
    return this._call.inputValues[0].value.toString();
  }

  get _symbol(): string {
    return this._call.inputValues[1].value.toString();
  }

  get _underlying(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get _collateral(): Address {
    return this._call.inputValues[3].value.toAddress();
  }
}

export class _initializeCall__Outputs {
  _call: _initializeCall;

  constructor(call: _initializeCall) {
    this._call = call;
  }
}

export class _setAdjustSpeedCall extends ethereum.Call {
  get inputs(): _setAdjustSpeedCall__Inputs {
    return new _setAdjustSpeedCall__Inputs(this);
  }

  get outputs(): _setAdjustSpeedCall__Outputs {
    return new _setAdjustSpeedCall__Outputs(this);
  }
}

export class _setAdjustSpeedCall__Inputs {
  _call: _setAdjustSpeedCall;

  constructor(call: _setAdjustSpeedCall) {
    this._call = call;
  }

  get newAdjustSpeed(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class _setAdjustSpeedCall__Outputs {
  _call: _setAdjustSpeedCall;

  constructor(call: _setAdjustSpeedCall) {
    this._call = call;
  }
}

export class _setBorrowTrackerCall extends ethereum.Call {
  get inputs(): _setBorrowTrackerCall__Inputs {
    return new _setBorrowTrackerCall__Inputs(this);
  }

  get outputs(): _setBorrowTrackerCall__Outputs {
    return new _setBorrowTrackerCall__Outputs(this);
  }
}

export class _setBorrowTrackerCall__Inputs {
  _call: _setBorrowTrackerCall;

  constructor(call: _setBorrowTrackerCall) {
    this._call = call;
  }

  get newBorrowTracker(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class _setBorrowTrackerCall__Outputs {
  _call: _setBorrowTrackerCall;

  constructor(call: _setBorrowTrackerCall) {
    this._call = call;
  }
}

export class _setFactoryCall extends ethereum.Call {
  get inputs(): _setFactoryCall__Inputs {
    return new _setFactoryCall__Inputs(this);
  }

  get outputs(): _setFactoryCall__Outputs {
    return new _setFactoryCall__Outputs(this);
  }
}

export class _setFactoryCall__Inputs {
  _call: _setFactoryCall;

  constructor(call: _setFactoryCall) {
    this._call = call;
  }
}

export class _setFactoryCall__Outputs {
  _call: _setFactoryCall;

  constructor(call: _setFactoryCall) {
    this._call = call;
  }
}

export class _setKinkUtilizationRateCall extends ethereum.Call {
  get inputs(): _setKinkUtilizationRateCall__Inputs {
    return new _setKinkUtilizationRateCall__Inputs(this);
  }

  get outputs(): _setKinkUtilizationRateCall__Outputs {
    return new _setKinkUtilizationRateCall__Outputs(this);
  }
}

export class _setKinkUtilizationRateCall__Inputs {
  _call: _setKinkUtilizationRateCall;

  constructor(call: _setKinkUtilizationRateCall) {
    this._call = call;
  }

  get newKinkUtilizationRate(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class _setKinkUtilizationRateCall__Outputs {
  _call: _setKinkUtilizationRateCall;

  constructor(call: _setKinkUtilizationRateCall) {
    this._call = call;
  }
}

export class _setReserveFactorCall extends ethereum.Call {
  get inputs(): _setReserveFactorCall__Inputs {
    return new _setReserveFactorCall__Inputs(this);
  }

  get outputs(): _setReserveFactorCall__Outputs {
    return new _setReserveFactorCall__Outputs(this);
  }
}

export class _setReserveFactorCall__Inputs {
  _call: _setReserveFactorCall;

  constructor(call: _setReserveFactorCall) {
    this._call = call;
  }

  get newReserveFactor(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class _setReserveFactorCall__Outputs {
  _call: _setReserveFactorCall;

  constructor(call: _setReserveFactorCall) {
    this._call = call;
  }
}

export class AccrueInterestCall extends ethereum.Call {
  get inputs(): AccrueInterestCall__Inputs {
    return new AccrueInterestCall__Inputs(this);
  }

  get outputs(): AccrueInterestCall__Outputs {
    return new AccrueInterestCall__Outputs(this);
  }
}

export class AccrueInterestCall__Inputs {
  _call: AccrueInterestCall;

  constructor(call: AccrueInterestCall) {
    this._call = call;
  }
}

export class AccrueInterestCall__Outputs {
  _call: AccrueInterestCall;

  constructor(call: AccrueInterestCall) {
    this._call = call;
  }
}

export class ApproveCall extends ethereum.Call {
  get inputs(): ApproveCall__Inputs {
    return new ApproveCall__Inputs(this);
  }

  get outputs(): ApproveCall__Outputs {
    return new ApproveCall__Outputs(this);
  }
}

export class ApproveCall__Inputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }

  get spender(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get value(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class ApproveCall__Outputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class BorrowApproveCall extends ethereum.Call {
  get inputs(): BorrowApproveCall__Inputs {
    return new BorrowApproveCall__Inputs(this);
  }

  get outputs(): BorrowApproveCall__Outputs {
    return new BorrowApproveCall__Outputs(this);
  }
}

export class BorrowApproveCall__Inputs {
  _call: BorrowApproveCall;

  constructor(call: BorrowApproveCall) {
    this._call = call;
  }

  get spender(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get value(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class BorrowApproveCall__Outputs {
  _call: BorrowApproveCall;

  constructor(call: BorrowApproveCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class BorrowPermitCall extends ethereum.Call {
  get inputs(): BorrowPermitCall__Inputs {
    return new BorrowPermitCall__Inputs(this);
  }

  get outputs(): BorrowPermitCall__Outputs {
    return new BorrowPermitCall__Outputs(this);
  }
}

export class BorrowPermitCall__Inputs {
  _call: BorrowPermitCall;

  constructor(call: BorrowPermitCall) {
    this._call = call;
  }

  get owner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get spender(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get value(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get deadline(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get v(): i32 {
    return this._call.inputValues[4].value.toI32();
  }

  get r(): Bytes {
    return this._call.inputValues[5].value.toBytes();
  }

  get s(): Bytes {
    return this._call.inputValues[6].value.toBytes();
  }
}

export class BorrowPermitCall__Outputs {
  _call: BorrowPermitCall;

  constructor(call: BorrowPermitCall) {
    this._call = call;
  }
}

export class MintCall extends ethereum.Call {
  get inputs(): MintCall__Inputs {
    return new MintCall__Inputs(this);
  }

  get outputs(): MintCall__Outputs {
    return new MintCall__Outputs(this);
  }
}

export class MintCall__Inputs {
  _call: MintCall;

  constructor(call: MintCall) {
    this._call = call;
  }

  get minter(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class MintCall__Outputs {
  _call: MintCall;

  constructor(call: MintCall) {
    this._call = call;
  }

  get mintTokens(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class PermitCall extends ethereum.Call {
  get inputs(): PermitCall__Inputs {
    return new PermitCall__Inputs(this);
  }

  get outputs(): PermitCall__Outputs {
    return new PermitCall__Outputs(this);
  }
}

export class PermitCall__Inputs {
  _call: PermitCall;

  constructor(call: PermitCall) {
    this._call = call;
  }

  get owner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get spender(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get value(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get deadline(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get v(): i32 {
    return this._call.inputValues[4].value.toI32();
  }

  get r(): Bytes {
    return this._call.inputValues[5].value.toBytes();
  }

  get s(): Bytes {
    return this._call.inputValues[6].value.toBytes();
  }
}

export class PermitCall__Outputs {
  _call: PermitCall;

  constructor(call: PermitCall) {
    this._call = call;
  }
}

export class RedeemCall extends ethereum.Call {
  get inputs(): RedeemCall__Inputs {
    return new RedeemCall__Inputs(this);
  }

  get outputs(): RedeemCall__Outputs {
    return new RedeemCall__Outputs(this);
  }
}

export class RedeemCall__Inputs {
  _call: RedeemCall;

  constructor(call: RedeemCall) {
    this._call = call;
  }

  get redeemer(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class RedeemCall__Outputs {
  _call: RedeemCall;

  constructor(call: RedeemCall) {
    this._call = call;
  }

  get redeemAmount(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class SkimCall extends ethereum.Call {
  get inputs(): SkimCall__Inputs {
    return new SkimCall__Inputs(this);
  }

  get outputs(): SkimCall__Outputs {
    return new SkimCall__Outputs(this);
  }
}

export class SkimCall__Inputs {
  _call: SkimCall;

  constructor(call: SkimCall) {
    this._call = call;
  }

  get to(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SkimCall__Outputs {
  _call: SkimCall;

  constructor(call: SkimCall) {
    this._call = call;
  }
}

export class TransferCall extends ethereum.Call {
  get inputs(): TransferCall__Inputs {
    return new TransferCall__Inputs(this);
  }

  get outputs(): TransferCall__Outputs {
    return new TransferCall__Outputs(this);
  }
}

export class TransferCall__Inputs {
  _call: TransferCall;

  constructor(call: TransferCall) {
    this._call = call;
  }

  get to(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get value(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class TransferCall__Outputs {
  _call: TransferCall;

  constructor(call: TransferCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class TransferFromCall extends ethereum.Call {
  get inputs(): TransferFromCall__Inputs {
    return new TransferFromCall__Inputs(this);
  }

  get outputs(): TransferFromCall__Outputs {
    return new TransferFromCall__Outputs(this);
  }
}

export class TransferFromCall__Inputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get value(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class TransferFromCall__Outputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class ExchangeRateCall extends ethereum.Call {
  get inputs(): ExchangeRateCall__Inputs {
    return new ExchangeRateCall__Inputs(this);
  }

  get outputs(): ExchangeRateCall__Outputs {
    return new ExchangeRateCall__Outputs(this);
  }
}

export class ExchangeRateCall__Inputs {
  _call: ExchangeRateCall;

  constructor(call: ExchangeRateCall) {
    this._call = call;
  }
}

export class ExchangeRateCall__Outputs {
  _call: ExchangeRateCall;

  constructor(call: ExchangeRateCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class SyncCall extends ethereum.Call {
  get inputs(): SyncCall__Inputs {
    return new SyncCall__Inputs(this);
  }

  get outputs(): SyncCall__Outputs {
    return new SyncCall__Outputs(this);
  }
}

export class SyncCall__Inputs {
  _call: SyncCall;

  constructor(call: SyncCall) {
    this._call = call;
  }
}

export class SyncCall__Outputs {
  _call: SyncCall;

  constructor(call: SyncCall) {
    this._call = call;
  }
}

export class BorrowCall extends ethereum.Call {
  get inputs(): BorrowCall__Inputs {
    return new BorrowCall__Inputs(this);
  }

  get outputs(): BorrowCall__Outputs {
    return new BorrowCall__Outputs(this);
  }
}

export class BorrowCall__Inputs {
  _call: BorrowCall;

  constructor(call: BorrowCall) {
    this._call = call;
  }

  get borrower(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get receiver(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get borrowAmount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get data(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }
}

export class BorrowCall__Outputs {
  _call: BorrowCall;

  constructor(call: BorrowCall) {
    this._call = call;
  }
}

export class LiquidateCall extends ethereum.Call {
  get inputs(): LiquidateCall__Inputs {
    return new LiquidateCall__Inputs(this);
  }

  get outputs(): LiquidateCall__Outputs {
    return new LiquidateCall__Outputs(this);
  }
}

export class LiquidateCall__Inputs {
  _call: LiquidateCall;

  constructor(call: LiquidateCall) {
    this._call = call;
  }

  get borrower(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get liquidator(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class LiquidateCall__Outputs {
  _call: LiquidateCall;

  constructor(call: LiquidateCall) {
    this._call = call;
  }

  get seizeTokens(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class TrackBorrowCall extends ethereum.Call {
  get inputs(): TrackBorrowCall__Inputs {
    return new TrackBorrowCall__Inputs(this);
  }

  get outputs(): TrackBorrowCall__Outputs {
    return new TrackBorrowCall__Outputs(this);
  }
}

export class TrackBorrowCall__Inputs {
  _call: TrackBorrowCall;

  constructor(call: TrackBorrowCall) {
    this._call = call;
  }

  get borrower(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TrackBorrowCall__Outputs {
  _call: TrackBorrowCall;

  constructor(call: TrackBorrowCall) {
    this._call = call;
  }
}
