// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt,
} from "@graphprotocol/graph-ts";

export class IRewarder__pendingTokensResult {
  value0: Array<Address>;
  value1: Array<BigInt>;

  constructor(value0: Array<Address>, value1: Array<BigInt>) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddressArray(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigIntArray(this.value1));
    return map;
  }

  getValue0(): Array<Address> {
    return this.value0;
  }

  getValue1(): Array<BigInt> {
    return this.value1;
  }
}

export class IRewarder extends ethereum.SmartContract {
  static bind(address: Address): IRewarder {
    return new IRewarder("IRewarder", address);
  }

  pendingTokens(
    pid: BigInt,
    user: Address,
    sushiAmount: BigInt,
  ): IRewarder__pendingTokensResult {
    let result = super.call(
      "pendingTokens",
      "pendingTokens(uint256,address,uint256):(address[],uint256[])",
      [
        ethereum.Value.fromUnsignedBigInt(pid),
        ethereum.Value.fromAddress(user),
        ethereum.Value.fromUnsignedBigInt(sushiAmount),
      ],
    );

    return new IRewarder__pendingTokensResult(
      result[0].toAddressArray(),
      result[1].toBigIntArray(),
    );
  }

  try_pendingTokens(
    pid: BigInt,
    user: Address,
    sushiAmount: BigInt,
  ): ethereum.CallResult<IRewarder__pendingTokensResult> {
    let result = super.tryCall(
      "pendingTokens",
      "pendingTokens(uint256,address,uint256):(address[],uint256[])",
      [
        ethereum.Value.fromUnsignedBigInt(pid),
        ethereum.Value.fromAddress(user),
        ethereum.Value.fromUnsignedBigInt(sushiAmount),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new IRewarder__pendingTokensResult(
        value[0].toAddressArray(),
        value[1].toBigIntArray(),
      ),
    );
  }
}
