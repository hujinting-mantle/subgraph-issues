// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt,
} from "@graphprotocol/graph-ts";

export class ILpDepositor extends ethereum.SmartContract {
  static bind(address: Address): ILpDepositor {
    return new ILpDepositor("ILpDepositor", address);
  }

  SOLID(): Address {
    let result = super.call("SOLID", "SOLID():(address)", []);

    return result[0].toAddress();
  }

  try_SOLID(): ethereum.CallResult<Address> {
    let result = super.tryCall("SOLID", "SOLID():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  SEX(): Address {
    let result = super.call("SEX", "SEX():(address)", []);

    return result[0].toAddress();
  }

  try_SEX(): ethereum.CallResult<Address> {
    let result = super.tryCall("SEX", "SEX():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  userBalances(account: Address, pool: Address): BigInt {
    let result = super.call(
      "userBalances",
      "userBalances(address,address):(uint256)",
      [ethereum.Value.fromAddress(account), ethereum.Value.fromAddress(pool)],
    );

    return result[0].toBigInt();
  }

  try_userBalances(
    account: Address,
    pool: Address,
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "userBalances",
      "userBalances(address,address):(uint256)",
      [ethereum.Value.fromAddress(account), ethereum.Value.fromAddress(pool)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  gaugeForPool(pool: Address): Address {
    let result = super.call("gaugeForPool", "gaugeForPool(address):(address)", [
      ethereum.Value.fromAddress(pool),
    ]);

    return result[0].toAddress();
  }

  try_gaugeForPool(pool: Address): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "gaugeForPool",
      "gaugeForPool(address):(address)",
      [ethereum.Value.fromAddress(pool)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }
}

export class DepositCall extends ethereum.Call {
  get inputs(): DepositCall__Inputs {
    return new DepositCall__Inputs(this);
  }

  get outputs(): DepositCall__Outputs {
    return new DepositCall__Outputs(this);
  }
}

export class DepositCall__Inputs {
  _call: DepositCall;

  constructor(call: DepositCall) {
    this._call = call;
  }

  get pool(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class DepositCall__Outputs {
  _call: DepositCall;

  constructor(call: DepositCall) {
    this._call = call;
  }
}

export class WithdrawCall extends ethereum.Call {
  get inputs(): WithdrawCall__Inputs {
    return new WithdrawCall__Inputs(this);
  }

  get outputs(): WithdrawCall__Outputs {
    return new WithdrawCall__Outputs(this);
  }
}

export class WithdrawCall__Inputs {
  _call: WithdrawCall;

  constructor(call: WithdrawCall) {
    this._call = call;
  }

  get pool(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class WithdrawCall__Outputs {
  _call: WithdrawCall;

  constructor(call: WithdrawCall) {
    this._call = call;
  }
}

export class GetRewardCall extends ethereum.Call {
  get inputs(): GetRewardCall__Inputs {
    return new GetRewardCall__Inputs(this);
  }

  get outputs(): GetRewardCall__Outputs {
    return new GetRewardCall__Outputs(this);
  }
}

export class GetRewardCall__Inputs {
  _call: GetRewardCall;

  constructor(call: GetRewardCall) {
    this._call = call;
  }

  get pools(): Array<Address> {
    return this._call.inputValues[0].value.toAddressArray();
  }
}

export class GetRewardCall__Outputs {
  _call: GetRewardCall;

  constructor(call: GetRewardCall) {
    this._call = call;
  }
}
