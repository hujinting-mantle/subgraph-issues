// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal,
} from "@graphprotocol/graph-ts";

export class FastSync extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save FastSync entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type FastSync must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("FastSync", id.toString(), this);
    }
  }

  static loadInBlock(id: string): FastSync | null {
    return changetype<FastSync | null>(store.get_in_block("FastSync", id));
  }

  static load(id: string): FastSync | null {
    return changetype<FastSync | null>(store.get("FastSync", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get syncState(): string {
    let value = this.get("syncState");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set syncState(value: string) {
    this.set("syncState", Value.fromString(value));
  }

  get syncStep(): BigInt {
    let value = this.get("syncStep");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set syncStep(value: BigInt) {
    this.set("syncStep", Value.fromBigInt(value));
  }
}

export class ImpermaxFactory extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save ImpermaxFactory entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type ImpermaxFactory must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("ImpermaxFactory", id.toString(), this);
    }
  }

  static loadInBlock(id: string): ImpermaxFactory | null {
    return changetype<ImpermaxFactory | null>(
      store.get_in_block("ImpermaxFactory", id),
    );
  }

  static load(id: string): ImpermaxFactory | null {
    return changetype<ImpermaxFactory | null>(store.get("ImpermaxFactory", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get totalBalanceUSD(): BigDecimal {
    let value = this.get("totalBalanceUSD");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set totalBalanceUSD(value: BigDecimal) {
    this.set("totalBalanceUSD", Value.fromBigDecimal(value));
  }

  get totalSupplyUSD(): BigDecimal {
    let value = this.get("totalSupplyUSD");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set totalSupplyUSD(value: BigDecimal) {
    this.set("totalSupplyUSD", Value.fromBigDecimal(value));
  }

  get totalBorrowsUSD(): BigDecimal {
    let value = this.get("totalBorrowsUSD");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set totalBorrowsUSD(value: BigDecimal) {
    this.set("totalBorrowsUSD", Value.fromBigDecimal(value));
  }
}

export class Bundle extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Bundle entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Bundle must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("Bundle", id.toString(), this);
    }
  }

  static loadInBlock(id: string): Bundle | null {
    return changetype<Bundle | null>(store.get_in_block("Bundle", id));
  }

  static load(id: string): Bundle | null {
    return changetype<Bundle | null>(store.get("Bundle", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get ethPrice(): BigDecimal {
    let value = this.get("ethPrice");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set ethPrice(value: BigDecimal) {
    this.set("ethPrice", Value.fromBigDecimal(value));
  }
}

export class Token extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Token entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Token must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("Token", id.toString(), this);
    }
  }

  static loadInBlock(id: string): Token | null {
    return changetype<Token | null>(store.get_in_block("Token", id));
  }

  static load(id: string): Token | null {
    return changetype<Token | null>(store.get("Token", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get symbol(): string {
    let value = this.get("symbol");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set symbol(value: string) {
    this.set("symbol", Value.fromString(value));
  }

  get name(): string {
    let value = this.get("name");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set name(value: string) {
    this.set("name", Value.fromString(value));
  }

  get decimals(): BigInt {
    let value = this.get("decimals");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set decimals(value: BigInt) {
    this.set("decimals", Value.fromBigInt(value));
  }

  get derivedETH(): BigDecimal {
    let value = this.get("derivedETH");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set derivedETH(value: BigDecimal) {
    this.set("derivedETH", Value.fromBigDecimal(value));
  }

  get derivedUSD(): BigDecimal {
    let value = this.get("derivedUSD");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set derivedUSD(value: BigDecimal) {
    this.set("derivedUSD", Value.fromBigDecimal(value));
  }
}

export class Pair extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Pair entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Pair must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("Pair", id.toString(), this);
    }
  }

  static loadInBlock(id: string): Pair | null {
    return changetype<Pair | null>(store.get_in_block("Pair", id));
  }

  static load(id: string): Pair | null {
    return changetype<Pair | null>(store.get("Pair", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get uniswapV2PairAddress(): string {
    let value = this.get("uniswapV2PairAddress");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set uniswapV2PairAddress(value: string) {
    this.set("uniswapV2PairAddress", Value.fromString(value));
  }

  get uniswapV2Factory(): string {
    let value = this.get("uniswapV2Factory");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set uniswapV2Factory(value: string) {
    this.set("uniswapV2Factory", Value.fromString(value));
  }

  get factory(): string {
    let value = this.get("factory");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set factory(value: string) {
    this.set("factory", Value.fromString(value));
  }

  get token0(): string {
    let value = this.get("token0");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set token0(value: string) {
    this.set("token0", Value.fromString(value));
  }

  get token1(): string {
    let value = this.get("token1");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set token1(value: string) {
    this.set("token1", Value.fromString(value));
  }

  get reserve0(): BigDecimal {
    let value = this.get("reserve0");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set reserve0(value: BigDecimal) {
    this.set("reserve0", Value.fromBigDecimal(value));
  }

  get reserve1(): BigDecimal {
    let value = this.get("reserve1");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set reserve1(value: BigDecimal) {
    this.set("reserve1", Value.fromBigDecimal(value));
  }

  get totalSupply(): BigDecimal {
    let value = this.get("totalSupply");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set totalSupply(value: BigDecimal) {
    this.set("totalSupply", Value.fromBigDecimal(value));
  }

  get reserveETH(): BigDecimal {
    let value = this.get("reserveETH");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set reserveETH(value: BigDecimal) {
    this.set("reserveETH", Value.fromBigDecimal(value));
  }

  get reserveUSD(): BigDecimal {
    let value = this.get("reserveUSD");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set reserveUSD(value: BigDecimal) {
    this.set("reserveUSD", Value.fromBigDecimal(value));
  }

  get token0Price(): BigDecimal {
    let value = this.get("token0Price");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set token0Price(value: BigDecimal) {
    this.set("token0Price", Value.fromBigDecimal(value));
  }

  get token1Price(): BigDecimal {
    let value = this.get("token1Price");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set token1Price(value: BigDecimal) {
    this.set("token1Price", Value.fromBigDecimal(value));
  }

  get derivedETH(): BigDecimal {
    let value = this.get("derivedETH");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set derivedETH(value: BigDecimal) {
    this.set("derivedETH", Value.fromBigDecimal(value));
  }

  get derivedUSD(): BigDecimal {
    let value = this.get("derivedUSD");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set derivedUSD(value: BigDecimal) {
    this.set("derivedUSD", Value.fromBigDecimal(value));
  }

  get syncCount(): BigInt {
    let value = this.get("syncCount");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set syncCount(value: BigInt) {
    this.set("syncCount", Value.fromBigInt(value));
  }

  get isStakedLPToken(): boolean {
    let value = this.get("isStakedLPToken");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set isStakedLPToken(value: boolean) {
    this.set("isStakedLPToken", Value.fromBoolean(value));
  }

  get exchangeRate(): BigDecimal {
    let value = this.get("exchangeRate");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set exchangeRate(value: BigDecimal) {
    this.set("exchangeRate", Value.fromBigDecimal(value));
  }

  get stakedLPTokenType(): string | null {
    let value = this.get("stakedLPTokenType");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set stakedLPTokenType(value: string | null) {
    if (!value) {
      this.unset("stakedLPTokenType");
    } else {
      this.set("stakedLPTokenType", Value.fromString(<string>value));
    }
  }

  get stakingRewards(): string | null {
    let value = this.get("stakingRewards");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set stakingRewards(value: string | null) {
    if (!value) {
      this.unset("stakingRewards");
    } else {
      this.set("stakingRewards", Value.fromString(<string>value));
    }
  }

  get masterChef(): string | null {
    let value = this.get("masterChef");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set masterChef(value: string | null) {
    if (!value) {
      this.unset("masterChef");
    } else {
      this.set("masterChef", Value.fromString(<string>value));
    }
  }

  get lpDepositor(): string | null {
    let value = this.get("lpDepositor");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set lpDepositor(value: string | null) {
    if (!value) {
      this.unset("lpDepositor");
    } else {
      this.set("lpDepositor", Value.fromString(<string>value));
    }
  }

  get gauge(): string | null {
    let value = this.get("gauge");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set gauge(value: string | null) {
    if (!value) {
      this.unset("gauge");
    } else {
      this.set("gauge", Value.fromString(<string>value));
    }
  }

  get pid(): BigInt | null {
    let value = this.get("pid");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set pid(value: BigInt | null) {
    if (!value) {
      this.unset("pid");
    } else {
      this.set("pid", Value.fromBigInt(<BigInt>value));
    }
  }

  get stakedTotalSupply(): BigDecimal | null {
    let value = this.get("stakedTotalSupply");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigDecimal();
    }
  }

  set stakedTotalSupply(value: BigDecimal | null) {
    if (!value) {
      this.unset("stakedTotalSupply");
    } else {
      this.set("stakedTotalSupply", Value.fromBigDecimal(<BigDecimal>value));
    }
  }

  get rewards(): RewardLoader {
    return new RewardLoader("Pair", this.get("id")!.toString(), "rewards");
  }
}

export class Collateral extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Collateral entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Collateral must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("Collateral", id.toString(), this);
    }
  }

  static loadInBlock(id: string): Collateral | null {
    return changetype<Collateral | null>(store.get_in_block("Collateral", id));
  }

  static load(id: string): Collateral | null {
    return changetype<Collateral | null>(store.get("Collateral", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get underlying(): string {
    let value = this.get("underlying");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set underlying(value: string) {
    this.set("underlying", Value.fromString(value));
  }

  get totalBalance(): BigDecimal {
    let value = this.get("totalBalance");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set totalBalance(value: BigDecimal) {
    this.set("totalBalance", Value.fromBigDecimal(value));
  }

  get safetyMargin(): BigDecimal {
    let value = this.get("safetyMargin");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set safetyMargin(value: BigDecimal) {
    this.set("safetyMargin", Value.fromBigDecimal(value));
  }

  get liquidationIncentive(): BigDecimal {
    let value = this.get("liquidationIncentive");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set liquidationIncentive(value: BigDecimal) {
    this.set("liquidationIncentive", Value.fromBigDecimal(value));
  }

  get liquidationFee(): BigDecimal {
    let value = this.get("liquidationFee");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set liquidationFee(value: BigDecimal) {
    this.set("liquidationFee", Value.fromBigDecimal(value));
  }

  get exchangeRate(): BigDecimal {
    let value = this.get("exchangeRate");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set exchangeRate(value: BigDecimal) {
    this.set("exchangeRate", Value.fromBigDecimal(value));
  }

  get totalBalanceUSD(): BigDecimal {
    let value = this.get("totalBalanceUSD");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set totalBalanceUSD(value: BigDecimal) {
    this.set("totalBalanceUSD", Value.fromBigDecimal(value));
  }

  get lendingPool(): string {
    let value = this.get("lendingPool");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set lendingPool(value: string) {
    this.set("lendingPool", Value.fromString(value));
  }
}

export class Borrowable extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Borrowable entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Borrowable must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("Borrowable", id.toString(), this);
    }
  }

  static loadInBlock(id: string): Borrowable | null {
    return changetype<Borrowable | null>(store.get_in_block("Borrowable", id));
  }

  static load(id: string): Borrowable | null {
    return changetype<Borrowable | null>(store.get("Borrowable", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get underlying(): string {
    let value = this.get("underlying");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set underlying(value: string) {
    this.set("underlying", Value.fromString(value));
  }

  get totalBalance(): BigDecimal {
    let value = this.get("totalBalance");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set totalBalance(value: BigDecimal) {
    this.set("totalBalance", Value.fromBigDecimal(value));
  }

  get totalBorrows(): BigDecimal {
    let value = this.get("totalBorrows");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set totalBorrows(value: BigDecimal) {
    this.set("totalBorrows", Value.fromBigDecimal(value));
  }

  get borrowRate(): BigDecimal {
    let value = this.get("borrowRate");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set borrowRate(value: BigDecimal) {
    this.set("borrowRate", Value.fromBigDecimal(value));
  }

  get reserveFactor(): BigDecimal {
    let value = this.get("reserveFactor");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set reserveFactor(value: BigDecimal) {
    this.set("reserveFactor", Value.fromBigDecimal(value));
  }

  get kinkBorrowRate(): BigDecimal {
    let value = this.get("kinkBorrowRate");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set kinkBorrowRate(value: BigDecimal) {
    this.set("kinkBorrowRate", Value.fromBigDecimal(value));
  }

  get kinkUtilizationRate(): BigDecimal {
    let value = this.get("kinkUtilizationRate");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set kinkUtilizationRate(value: BigDecimal) {
    this.set("kinkUtilizationRate", Value.fromBigDecimal(value));
  }

  get adjustSpeed(): BigDecimal {
    let value = this.get("adjustSpeed");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set adjustSpeed(value: BigDecimal) {
    this.set("adjustSpeed", Value.fromBigDecimal(value));
  }

  get borrowIndex(): BigDecimal {
    let value = this.get("borrowIndex");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set borrowIndex(value: BigDecimal) {
    this.set("borrowIndex", Value.fromBigDecimal(value));
  }

  get accrualTimestamp(): BigInt {
    let value = this.get("accrualTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set accrualTimestamp(value: BigInt) {
    this.set("accrualTimestamp", Value.fromBigInt(value));
  }

  get exchangeRate(): BigDecimal {
    let value = this.get("exchangeRate");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set exchangeRate(value: BigDecimal) {
    this.set("exchangeRate", Value.fromBigDecimal(value));
  }

  get totalBalanceUSD(): BigDecimal {
    let value = this.get("totalBalanceUSD");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set totalBalanceUSD(value: BigDecimal) {
    this.set("totalBalanceUSD", Value.fromBigDecimal(value));
  }

  get totalSupplyUSD(): BigDecimal {
    let value = this.get("totalSupplyUSD");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set totalSupplyUSD(value: BigDecimal) {
    this.set("totalSupplyUSD", Value.fromBigDecimal(value));
  }

  get totalBorrowsUSD(): BigDecimal {
    let value = this.get("totalBorrowsUSD");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set totalBorrowsUSD(value: BigDecimal) {
    this.set("totalBorrowsUSD", Value.fromBigDecimal(value));
  }

  get lendingPool(): string {
    let value = this.get("lendingPool");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set lendingPool(value: string) {
    this.set("lendingPool", Value.fromString(value));
  }

  get farmingPool(): string | null {
    let value = this.get("farmingPool");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set farmingPool(value: string | null) {
    if (!value) {
      this.unset("farmingPool");
    } else {
      this.set("farmingPool", Value.fromString(<string>value));
    }
  }

  get borrowTracker(): string | null {
    let value = this.get("borrowTracker");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set borrowTracker(value: string | null) {
    if (!value) {
      this.unset("borrowTracker");
    } else {
      this.set("borrowTracker", Value.fromString(<string>value));
    }
  }
}

export class LendingPool extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save LendingPool entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type LendingPool must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("LendingPool", id.toString(), this);
    }
  }

  static loadInBlock(id: string): LendingPool | null {
    return changetype<LendingPool | null>(
      store.get_in_block("LendingPool", id),
    );
  }

  static load(id: string): LendingPool | null {
    return changetype<LendingPool | null>(store.get("LendingPool", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get pair(): string {
    let value = this.get("pair");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set pair(value: string) {
    this.set("pair", Value.fromString(value));
  }

  get collateral(): string {
    let value = this.get("collateral");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set collateral(value: string) {
    this.set("collateral", Value.fromString(value));
  }

  get borrowable0(): string {
    let value = this.get("borrowable0");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set borrowable0(value: string) {
    this.set("borrowable0", Value.fromString(value));
  }

  get borrowable1(): string {
    let value = this.get("borrowable1");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set borrowable1(value: string) {
    this.set("borrowable1", Value.fromString(value));
  }

  get totalBalanceUSD(): BigDecimal {
    let value = this.get("totalBalanceUSD");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set totalBalanceUSD(value: BigDecimal) {
    this.set("totalBalanceUSD", Value.fromBigDecimal(value));
  }

  get totalSupplyUSD(): BigDecimal {
    let value = this.get("totalSupplyUSD");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set totalSupplyUSD(value: BigDecimal) {
    this.set("totalSupplyUSD", Value.fromBigDecimal(value));
  }

  get totalBorrowsUSD(): BigDecimal {
    let value = this.get("totalBorrowsUSD");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set totalBorrowsUSD(value: BigDecimal) {
    this.set("totalBorrowsUSD", Value.fromBigDecimal(value));
  }
}

export class Distributor extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Distributor entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Distributor must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("Distributor", id.toString(), this);
    }
  }

  static loadInBlock(id: string): Distributor | null {
    return changetype<Distributor | null>(
      store.get_in_block("Distributor", id),
    );
  }

  static load(id: string): Distributor | null {
    return changetype<Distributor | null>(store.get("Distributor", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }
}

export class FarmingPool extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save FarmingPool entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type FarmingPool must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("FarmingPool", id.toString(), this);
    }
  }

  static loadInBlock(id: string): FarmingPool | null {
    return changetype<FarmingPool | null>(
      store.get_in_block("FarmingPool", id),
    );
  }

  static load(id: string): FarmingPool | null {
    return changetype<FarmingPool | null>(store.get("FarmingPool", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get borrowable(): string {
    let value = this.get("borrowable");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set borrowable(value: string) {
    this.set("borrowable", Value.fromString(value));
  }

  get distributor(): string {
    let value = this.get("distributor");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set distributor(value: string) {
    this.set("distributor", Value.fromString(value));
  }

  get epochAmount(): BigDecimal {
    let value = this.get("epochAmount");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set epochAmount(value: BigDecimal) {
    this.set("epochAmount", Value.fromBigDecimal(value));
  }

  get epochBegin(): BigInt {
    let value = this.get("epochBegin");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set epochBegin(value: BigInt) {
    this.set("epochBegin", Value.fromBigInt(value));
  }

  get segmentLength(): BigInt {
    let value = this.get("segmentLength");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set segmentLength(value: BigInt) {
    this.set("segmentLength", Value.fromBigInt(value));
  }

  get vestingBegin(): BigInt {
    let value = this.get("vestingBegin");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set vestingBegin(value: BigInt) {
    this.set("vestingBegin", Value.fromBigInt(value));
  }

  get sharePercentage(): BigDecimal {
    let value = this.get("sharePercentage");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set sharePercentage(value: BigDecimal) {
    this.set("sharePercentage", Value.fromBigDecimal(value));
  }
}

export class Reward extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Reward entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Reward must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("Reward", id.toString(), this);
    }
  }

  static loadInBlock(id: string): Reward | null {
    return changetype<Reward | null>(store.get_in_block("Reward", id));
  }

  static load(id: string): Reward | null {
    return changetype<Reward | null>(store.get("Reward", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get pair(): string {
    let value = this.get("pair");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set pair(value: string) {
    this.set("pair", Value.fromString(value));
  }

  get rewardsToken(): string {
    let value = this.get("rewardsToken");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set rewardsToken(value: string) {
    this.set("rewardsToken", Value.fromString(value));
  }

  get rewardRate(): BigDecimal {
    let value = this.get("rewardRate");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set rewardRate(value: BigDecimal) {
    this.set("rewardRate", Value.fromBigDecimal(value));
  }

  get periodFinish(): BigInt {
    let value = this.get("periodFinish");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set periodFinish(value: BigInt) {
    this.set("periodFinish", Value.fromBigInt(value));
  }
}

export class User extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save User entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type User must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("User", id.toString(), this);
    }
  }

  static loadInBlock(id: string): User | null {
    return changetype<User | null>(store.get_in_block("User", id));
  }

  static load(id: string): User | null {
    return changetype<User | null>(store.get("User", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get collateralPositions(): CollateralPositionLoader {
    return new CollateralPositionLoader(
      "User",
      this.get("id")!.toString(),
      "collateralPositions",
    );
  }

  get supplyPositions(): SupplyPositionLoader {
    return new SupplyPositionLoader(
      "User",
      this.get("id")!.toString(),
      "supplyPositions",
    );
  }

  get borrowPositions(): BorrowPositionLoader {
    return new BorrowPositionLoader(
      "User",
      this.get("id")!.toString(),
      "borrowPositions",
    );
  }
}

export class CollateralPosition extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save CollateralPosition entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type CollateralPosition must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("CollateralPosition", id.toString(), this);
    }
  }

  static loadInBlock(id: string): CollateralPosition | null {
    return changetype<CollateralPosition | null>(
      store.get_in_block("CollateralPosition", id),
    );
  }

  static load(id: string): CollateralPosition | null {
    return changetype<CollateralPosition | null>(
      store.get("CollateralPosition", id),
    );
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get user(): string {
    let value = this.get("user");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set user(value: string) {
    this.set("user", Value.fromString(value));
  }

  get collateral(): string {
    let value = this.get("collateral");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set collateral(value: string) {
    this.set("collateral", Value.fromString(value));
  }

  get balance(): BigDecimal {
    let value = this.get("balance");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set balance(value: BigDecimal) {
    this.set("balance", Value.fromBigDecimal(value));
  }
}

export class SupplyPosition extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save SupplyPosition entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type SupplyPosition must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("SupplyPosition", id.toString(), this);
    }
  }

  static loadInBlock(id: string): SupplyPosition | null {
    return changetype<SupplyPosition | null>(
      store.get_in_block("SupplyPosition", id),
    );
  }

  static load(id: string): SupplyPosition | null {
    return changetype<SupplyPosition | null>(store.get("SupplyPosition", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get user(): string {
    let value = this.get("user");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set user(value: string) {
    this.set("user", Value.fromString(value));
  }

  get borrowable(): string {
    let value = this.get("borrowable");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set borrowable(value: string) {
    this.set("borrowable", Value.fromString(value));
  }

  get balance(): BigDecimal {
    let value = this.get("balance");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set balance(value: BigDecimal) {
    this.set("balance", Value.fromBigDecimal(value));
  }
}

export class BorrowPosition extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save BorrowPosition entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type BorrowPosition must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("BorrowPosition", id.toString(), this);
    }
  }

  static loadInBlock(id: string): BorrowPosition | null {
    return changetype<BorrowPosition | null>(
      store.get_in_block("BorrowPosition", id),
    );
  }

  static load(id: string): BorrowPosition | null {
    return changetype<BorrowPosition | null>(store.get("BorrowPosition", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get user(): string {
    let value = this.get("user");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set user(value: string) {
    this.set("user", Value.fromString(value));
  }

  get borrowable(): string {
    let value = this.get("borrowable");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set borrowable(value: string) {
    this.set("borrowable", Value.fromString(value));
  }

  get borrowBalance(): BigDecimal {
    let value = this.get("borrowBalance");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set borrowBalance(value: BigDecimal) {
    this.set("borrowBalance", Value.fromBigDecimal(value));
  }

  get borrowIndex(): BigDecimal {
    let value = this.get("borrowIndex");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set borrowIndex(value: BigDecimal) {
    this.set("borrowIndex", Value.fromBigDecimal(value));
  }
}

export class RewardLoader extends Entity {
  _entity: string;
  _field: string;
  _id: string;

  constructor(entity: string, id: string, field: string) {
    super();
    this._entity = entity;
    this._id = id;
    this._field = field;
  }

  load(): Reward[] {
    let value = store.loadRelated(this._entity, this._id, this._field);
    return changetype<Reward[]>(value);
  }
}

export class CollateralPositionLoader extends Entity {
  _entity: string;
  _field: string;
  _id: string;

  constructor(entity: string, id: string, field: string) {
    super();
    this._entity = entity;
    this._id = id;
    this._field = field;
  }

  load(): CollateralPosition[] {
    let value = store.loadRelated(this._entity, this._id, this._field);
    return changetype<CollateralPosition[]>(value);
  }
}

export class SupplyPositionLoader extends Entity {
  _entity: string;
  _field: string;
  _id: string;

  constructor(entity: string, id: string, field: string) {
    super();
    this._entity = entity;
    this._id = id;
    this._field = field;
  }

  load(): SupplyPosition[] {
    let value = store.loadRelated(this._entity, this._id, this._field);
    return changetype<SupplyPosition[]>(value);
  }
}

export class BorrowPositionLoader extends Entity {
  _entity: string;
  _field: string;
  _id: string;

  constructor(entity: string, id: string, field: string) {
    super();
    this._entity = entity;
    this._id = id;
    this._field = field;
  }

  load(): BorrowPosition[] {
    let value = store.loadRelated(this._entity, this._id, this._field);
    return changetype<BorrowPosition[]>(value);
  }
}
