// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt,
} from "@graphprotocol/graph-ts";

export class ISimpleRewarder extends ethereum.SmartContract {
  static bind(address: Address): ISimpleRewarder {
    return new ISimpleRewarder("ISimpleRewarder", address);
  }

  isNative(): boolean {
    let result = super.call("isNative", "isNative():(bool)", []);

    return result[0].toBoolean();
  }

  try_isNative(): ethereum.CallResult<boolean> {
    let result = super.tryCall("isNative", "isNative():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  pendingTokens(user: Address): BigInt {
    let result = super.call(
      "pendingTokens",
      "pendingTokens(address):(uint256)",
      [ethereum.Value.fromAddress(user)],
    );

    return result[0].toBigInt();
  }

  try_pendingTokens(user: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "pendingTokens",
      "pendingTokens(address):(uint256)",
      [ethereum.Value.fromAddress(user)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  rewardToken(): Address {
    let result = super.call("rewardToken", "rewardToken():(address)", []);

    return result[0].toAddress();
  }

  try_rewardToken(): ethereum.CallResult<Address> {
    let result = super.tryCall("rewardToken", "rewardToken():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  tokenPerSec(): BigInt {
    let result = super.call("tokenPerSec", "tokenPerSec():(uint256)", []);

    return result[0].toBigInt();
  }

  try_tokenPerSec(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("tokenPerSec", "tokenPerSec():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }
}
